
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000358a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  0000358a  0000361e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800174  00800174  00003732  2**0
                  ALLOC
  3 .stab         00002ec8  00000000  00000000  00003734  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f35  00000000  00000000  000065fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007531  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007671  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000077e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000942a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a315  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b0c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b224  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b4b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bc7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 37       	cpi	r26, 0x7F	; 127
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 77 0a 	call	0x14ee	; 0x14ee <main>
      8a:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 47 1a 	jmp	0x348e	; 0x348e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e5       	ldi	r26, 0x5D	; 93
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 63 1a 	jmp	0x34c6	; 0x34c6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 53 1a 	jmp	0x34a6	; 0x34a6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 53 1a 	jmp	0x34a6	; 0x34a6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 47 1a 	jmp	0x348e	; 0x348e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8d e5       	ldi	r24, 0x5D	; 93
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 63 1a 	jmp	0x34c6	; 0x34c6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 53 1a 	jmp	0x34a6	; 0x34a6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 53 1a 	jmp	0x34a6	; 0x34a6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 53 1a 	jmp	0x34a6	; 0x34a6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 57 1a 	jmp	0x34ae	; 0x34ae <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 73 1a 	jmp	0x34e6	; 0x34e6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <OpenThenClose>:
#define NUMBER_OF_OVERFLOWS_PER_FIFTEEN_SECONDS 458
#elif TIMER_0_COMPARE_MODE
#define NUMBER_OF_OVERFLOWS_PER_FIFTEEN_SECONDS 500
#endif

void OpenThenClose (void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	UART_sendByte(ARE_YOU_READY) ;
	while(UART_recieveByte() != DONE ){} ;
	 */
	if(g_configure == 0){
     b4e:	80 91 78 01 	lds	r24, 0x0178
     b52:	88 23       	and	r24, r24
     b54:	89 f4       	brne	.+34     	; 0xb78 <OpenThenClose+0x32>
		g_configure = 1 ;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	80 93 78 01 	sts	0x0178, r24
		LCD_displayString("Door is OPenned ");
     b5c:	80 e6       	ldi	r24, 0x60	; 96
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
#ifdef TIMER_0_NORMAL_MODE
		Timer0_Init_Normal_Mode() ;
     b64:	0e 94 04 19 	call	0x3208	; 0x3208 <Timer0_Init_Normal_Mode>
#elif TIMER_0_COMPARE_MODE
		Timer0_Init_CTC_Mode();
#endif
		while(UART_recieveByte() != DONE ){} ;
     b68:	0e 94 aa 19 	call	0x3354	; 0x3354 <UART_recieveByte>
     b6c:	82 32       	cpi	r24, 0x22	; 34
     b6e:	e1 f7       	brne	.-8      	; 0xb68 <OpenThenClose+0x22>
		g_select = 6 ;
     b70:	86 e0       	ldi	r24, 0x06	; 6
     b72:	80 93 77 01 	sts	0x0177, r24
     b76:	1b c0       	rjmp	.+54     	; 0xbae <OpenThenClose+0x68>

	}else if(g_configure == 1){
     b78:	80 91 78 01 	lds	r24, 0x0178
     b7c:	81 30       	cpi	r24, 0x01	; 1
     b7e:	89 f4       	brne	.+34     	; 0xba2 <OpenThenClose+0x5c>
		g_configure = 2 ;
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	80 93 78 01 	sts	0x0178, r24
		LCD_displayString("Door is Closed ");
     b86:	81 e7       	ldi	r24, 0x71	; 113
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
#ifdef TIMER_0_NORMAL_MODE
		Timer0_Init_Normal_Mode() ;
     b8e:	0e 94 04 19 	call	0x3208	; 0x3208 <Timer0_Init_Normal_Mode>
#elif TIMER_0_COMPARE_MODE
		Timer0_Init_CTC_Mode();
#endif
		while(UART_recieveByte() != DONE ){} ;
     b92:	0e 94 aa 19 	call	0x3354	; 0x3354 <UART_recieveByte>
     b96:	82 32       	cpi	r24, 0x22	; 34
     b98:	e1 f7       	brne	.-8      	; 0xb92 <OpenThenClose+0x4c>
		g_select = 6 ;
     b9a:	86 e0       	ldi	r24, 0x06	; 6
     b9c:	80 93 77 01 	sts	0x0177, r24
     ba0:	06 c0       	rjmp	.+12     	; 0xbae <OpenThenClose+0x68>

	}else if(g_configure == 2){
     ba2:	80 91 78 01 	lds	r24, 0x0178
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	11 f4       	brne	.+4      	; 0xbae <OpenThenClose+0x68>
		g_select = 0 ;
     baa:	10 92 77 01 	sts	0x0177, r1
	}


	return ;

}
     bae:	cf 91       	pop	r28
     bb0:	df 91       	pop	r29
     bb2:	08 95       	ret

00000bb4 <secondProcessing>:


void secondProcessing(void){
     bb4:	df 93       	push	r29
     bb6:	cf 93       	push	r28
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
	g_cycleCount ++ ;
     bbc:	80 91 79 01 	lds	r24, 0x0179
     bc0:	90 91 7a 01 	lds	r25, 0x017A
     bc4:	01 96       	adiw	r24, 0x01	; 1
     bc6:	90 93 7a 01 	sts	0x017A, r25
     bca:	80 93 79 01 	sts	0x0179, r24
	if(g_cycleCount == NUMBER_OF_OVERFLOWS_PER_FIFTEEN_SECONDS){
     bce:	80 91 79 01 	lds	r24, 0x0179
     bd2:	90 91 7a 01 	lds	r25, 0x017A
     bd6:	21 e0       	ldi	r18, 0x01	; 1
     bd8:	8a 3c       	cpi	r24, 0xCA	; 202
     bda:	92 07       	cpc	r25, r18
     bdc:	41 f4       	brne	.+16     	; 0xbee <secondProcessing+0x3a>
		g_cycleCount = 0 ;
     bde:	10 92 7a 01 	sts	0x017A, r1
     be2:	10 92 79 01 	sts	0x0179, r1
		Timer0_DeInit() ;
     be6:	0e 94 19 19 	call	0x3232	; 0x3232 <Timer0_DeInit>
		LCD_clearScreen() ;
     bea:	0e 94 c7 18 	call	0x318e	; 0x318e <LCD_clearScreen>
	}
}
     bee:	cf 91       	pop	r28
     bf0:	df 91       	pop	r29
     bf2:	08 95       	ret

00000bf4 <validateTheNewPassWord>:


void validateTheNewPassWord (){
     bf4:	df 93       	push	r29
     bf6:	cf 93       	push	r28
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
     bfc:	aa 97       	sbiw	r28, 0x2a	; 42
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	de bf       	out	0x3e, r29	; 62
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	cd bf       	out	0x3d, r28	; 61

	if(UART_recieveByte() == NOT_MATCH){
     c08:	0e 94 aa 19 	call	0x3354	; 0x3354 <UART_recieveByte>
     c0c:	8a 3c       	cpi	r24, 0xCA	; 202
     c0e:	09 f0       	breq	.+2      	; 0xc12 <validateTheNewPassWord+0x1e>
     c10:	82 c0       	rjmp	.+260    	; 0xd16 <validateTheNewPassWord+0x122>
		LCD_clearScreen() ;
     c12:	0e 94 c7 18 	call	0x318e	; 0x318e <LCD_clearScreen>
		LCD_displayString("---ERROR!!---");
     c16:	81 e8       	ldi	r24, 0x81	; 129
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	90 e8       	ldi	r25, 0x80	; 128
     c22:	ab e3       	ldi	r26, 0x3B	; 59
     c24:	b5 e4       	ldi	r27, 0x45	; 69
     c26:	8f a3       	std	Y+39, r24	; 0x27
     c28:	98 a7       	std	Y+40, r25	; 0x28
     c2a:	a9 a7       	std	Y+41, r26	; 0x29
     c2c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c2e:	6f a1       	ldd	r22, Y+39	; 0x27
     c30:	78 a5       	ldd	r23, Y+40	; 0x28
     c32:	89 a5       	ldd	r24, Y+41	; 0x29
     c34:	9a a5       	ldd	r25, Y+42	; 0x2a
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	4a e7       	ldi	r20, 0x7A	; 122
     c3c:	53 e4       	ldi	r21, 0x43	; 67
     c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	8b a3       	std	Y+35, r24	; 0x23
     c48:	9c a3       	std	Y+36, r25	; 0x24
     c4a:	ad a3       	std	Y+37, r26	; 0x25
     c4c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     c4e:	6b a1       	ldd	r22, Y+35	; 0x23
     c50:	7c a1       	ldd	r23, Y+36	; 0x24
     c52:	8d a1       	ldd	r24, Y+37	; 0x25
     c54:	9e a1       	ldd	r25, Y+38	; 0x26
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	40 e8       	ldi	r20, 0x80	; 128
     c5c:	5f e3       	ldi	r21, 0x3F	; 63
     c5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c62:	88 23       	and	r24, r24
     c64:	2c f4       	brge	.+10     	; 0xc70 <validateTheNewPassWord+0x7c>
		__ticks = 1;
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	9a a3       	std	Y+34, r25	; 0x22
     c6c:	89 a3       	std	Y+33, r24	; 0x21
     c6e:	3f c0       	rjmp	.+126    	; 0xcee <validateTheNewPassWord+0xfa>
	else if (__tmp > 65535)
     c70:	6b a1       	ldd	r22, Y+35	; 0x23
     c72:	7c a1       	ldd	r23, Y+36	; 0x24
     c74:	8d a1       	ldd	r24, Y+37	; 0x25
     c76:	9e a1       	ldd	r25, Y+38	; 0x26
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	3f ef       	ldi	r19, 0xFF	; 255
     c7c:	4f e7       	ldi	r20, 0x7F	; 127
     c7e:	57 e4       	ldi	r21, 0x47	; 71
     c80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c84:	18 16       	cp	r1, r24
     c86:	4c f5       	brge	.+82     	; 0xcda <validateTheNewPassWord+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c88:	6f a1       	ldd	r22, Y+39	; 0x27
     c8a:	78 a5       	ldd	r23, Y+40	; 0x28
     c8c:	89 a5       	ldd	r24, Y+41	; 0x29
     c8e:	9a a5       	ldd	r25, Y+42	; 0x2a
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	40 e2       	ldi	r20, 0x20	; 32
     c96:	51 e4       	ldi	r21, 0x41	; 65
     c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c9c:	dc 01       	movw	r26, r24
     c9e:	cb 01       	movw	r24, r22
     ca0:	bc 01       	movw	r22, r24
     ca2:	cd 01       	movw	r24, r26
     ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ca8:	dc 01       	movw	r26, r24
     caa:	cb 01       	movw	r24, r22
     cac:	9a a3       	std	Y+34, r25	; 0x22
     cae:	89 a3       	std	Y+33, r24	; 0x21
     cb0:	0f c0       	rjmp	.+30     	; 0xcd0 <validateTheNewPassWord+0xdc>
     cb2:	89 e1       	ldi	r24, 0x19	; 25
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	98 a3       	std	Y+32, r25	; 0x20
     cb8:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cba:	8f 8d       	ldd	r24, Y+31	; 0x1f
     cbc:	98 a1       	ldd	r25, Y+32	; 0x20
     cbe:	01 97       	sbiw	r24, 0x01	; 1
     cc0:	f1 f7       	brne	.-4      	; 0xcbe <validateTheNewPassWord+0xca>
     cc2:	98 a3       	std	Y+32, r25	; 0x20
     cc4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cc6:	89 a1       	ldd	r24, Y+33	; 0x21
     cc8:	9a a1       	ldd	r25, Y+34	; 0x22
     cca:	01 97       	sbiw	r24, 0x01	; 1
     ccc:	9a a3       	std	Y+34, r25	; 0x22
     cce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cd0:	89 a1       	ldd	r24, Y+33	; 0x21
     cd2:	9a a1       	ldd	r25, Y+34	; 0x22
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	69 f7       	brne	.-38     	; 0xcb2 <validateTheNewPassWord+0xbe>
     cd8:	14 c0       	rjmp	.+40     	; 0xd02 <validateTheNewPassWord+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cda:	6b a1       	ldd	r22, Y+35	; 0x23
     cdc:	7c a1       	ldd	r23, Y+36	; 0x24
     cde:	8d a1       	ldd	r24, Y+37	; 0x25
     ce0:	9e a1       	ldd	r25, Y+38	; 0x26
     ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ce6:	dc 01       	movw	r26, r24
     ce8:	cb 01       	movw	r24, r22
     cea:	9a a3       	std	Y+34, r25	; 0x22
     cec:	89 a3       	std	Y+33, r24	; 0x21
     cee:	89 a1       	ldd	r24, Y+33	; 0x21
     cf0:	9a a1       	ldd	r25, Y+34	; 0x22
     cf2:	9e 8f       	std	Y+30, r25	; 0x1e
     cf4:	8d 8f       	std	Y+29, r24	; 0x1d
     cf6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cf8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     cfa:	01 97       	sbiw	r24, 0x01	; 1
     cfc:	f1 f7       	brne	.-4      	; 0xcfa <validateTheNewPassWord+0x106>
     cfe:	9e 8f       	std	Y+30, r25	; 0x1e
     d00:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(3000) ;
		LCD_clearScreen() ;
     d02:	0e 94 c7 18 	call	0x318e	; 0x318e <LCD_clearScreen>
		LCD_displayString("REPEAT STEPS AGAIN");
     d06:	8f e8       	ldi	r24, 0x8F	; 143
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
		g_select = 4 ;
     d0e:	84 e0       	ldi	r24, 0x04	; 4
     d10:	80 93 77 01 	sts	0x0177, r24
     d14:	ee c0       	rjmp	.+476    	; 0xef2 <validateTheNewPassWord+0x2fe>

	}else{
		LCD_clearScreen() ;
     d16:	0e 94 c7 18 	call	0x318e	; 0x318e <LCD_clearScreen>
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e6       	ldi	r25, 0x60	; 96
     d1e:	aa e6       	ldi	r26, 0x6A	; 106
     d20:	b6 e4       	ldi	r27, 0x46	; 70
     d22:	89 8f       	std	Y+25, r24	; 0x19
     d24:	9a 8f       	std	Y+26, r25	; 0x1a
     d26:	ab 8f       	std	Y+27, r26	; 0x1b
     d28:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d2a:	69 8d       	ldd	r22, Y+25	; 0x19
     d2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d30:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	4a e7       	ldi	r20, 0x7A	; 122
     d38:	53 e4       	ldi	r21, 0x43	; 67
     d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	8d 8b       	std	Y+21, r24	; 0x15
     d44:	9e 8b       	std	Y+22, r25	; 0x16
     d46:	af 8b       	std	Y+23, r26	; 0x17
     d48:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d4a:	6d 89       	ldd	r22, Y+21	; 0x15
     d4c:	7e 89       	ldd	r23, Y+22	; 0x16
     d4e:	8f 89       	ldd	r24, Y+23	; 0x17
     d50:	98 8d       	ldd	r25, Y+24	; 0x18
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	40 e8       	ldi	r20, 0x80	; 128
     d58:	5f e3       	ldi	r21, 0x3F	; 63
     d5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d5e:	88 23       	and	r24, r24
     d60:	2c f4       	brge	.+10     	; 0xd6c <validateTheNewPassWord+0x178>
		__ticks = 1;
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	9c 8b       	std	Y+20, r25	; 0x14
     d68:	8b 8b       	std	Y+19, r24	; 0x13
     d6a:	3f c0       	rjmp	.+126    	; 0xdea <validateTheNewPassWord+0x1f6>
	else if (__tmp > 65535)
     d6c:	6d 89       	ldd	r22, Y+21	; 0x15
     d6e:	7e 89       	ldd	r23, Y+22	; 0x16
     d70:	8f 89       	ldd	r24, Y+23	; 0x17
     d72:	98 8d       	ldd	r25, Y+24	; 0x18
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	3f ef       	ldi	r19, 0xFF	; 255
     d78:	4f e7       	ldi	r20, 0x7F	; 127
     d7a:	57 e4       	ldi	r21, 0x47	; 71
     d7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d80:	18 16       	cp	r1, r24
     d82:	4c f5       	brge	.+82     	; 0xdd6 <validateTheNewPassWord+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d84:	69 8d       	ldd	r22, Y+25	; 0x19
     d86:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d88:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e2       	ldi	r20, 0x20	; 32
     d92:	51 e4       	ldi	r21, 0x41	; 65
     d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	bc 01       	movw	r22, r24
     d9e:	cd 01       	movw	r24, r26
     da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	9c 8b       	std	Y+20, r25	; 0x14
     daa:	8b 8b       	std	Y+19, r24	; 0x13
     dac:	0f c0       	rjmp	.+30     	; 0xdcc <validateTheNewPassWord+0x1d8>
     dae:	89 e1       	ldi	r24, 0x19	; 25
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	9a 8b       	std	Y+18, r25	; 0x12
     db4:	89 8b       	std	Y+17, r24	; 0x11
     db6:	89 89       	ldd	r24, Y+17	; 0x11
     db8:	9a 89       	ldd	r25, Y+18	; 0x12
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <validateTheNewPassWord+0x1c6>
     dbe:	9a 8b       	std	Y+18, r25	; 0x12
     dc0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc2:	8b 89       	ldd	r24, Y+19	; 0x13
     dc4:	9c 89       	ldd	r25, Y+20	; 0x14
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	9c 8b       	std	Y+20, r25	; 0x14
     dca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dcc:	8b 89       	ldd	r24, Y+19	; 0x13
     dce:	9c 89       	ldd	r25, Y+20	; 0x14
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	69 f7       	brne	.-38     	; 0xdae <validateTheNewPassWord+0x1ba>
     dd4:	14 c0       	rjmp	.+40     	; 0xdfe <validateTheNewPassWord+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd6:	6d 89       	ldd	r22, Y+21	; 0x15
     dd8:	7e 89       	ldd	r23, Y+22	; 0x16
     dda:	8f 89       	ldd	r24, Y+23	; 0x17
     ddc:	98 8d       	ldd	r25, Y+24	; 0x18
     dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	9c 8b       	std	Y+20, r25	; 0x14
     de8:	8b 8b       	std	Y+19, r24	; 0x13
     dea:	8b 89       	ldd	r24, Y+19	; 0x13
     dec:	9c 89       	ldd	r25, Y+20	; 0x14
     dee:	98 8b       	std	Y+16, r25	; 0x10
     df0:	8f 87       	std	Y+15, r24	; 0x0f
     df2:	8f 85       	ldd	r24, Y+15	; 0x0f
     df4:	98 89       	ldd	r25, Y+16	; 0x10
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <validateTheNewPassWord+0x202>
     dfa:	98 8b       	std	Y+16, r25	; 0x10
     dfc:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(15000) ;
		LCD_displayString("PASS WORD SAVED!");
     dfe:	82 ea       	ldi	r24, 0xA2	; 162
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e6       	ldi	r25, 0x60	; 96
     e0a:	aa e6       	ldi	r26, 0x6A	; 106
     e0c:	b6 e4       	ldi	r27, 0x46	; 70
     e0e:	8b 87       	std	Y+11, r24	; 0x0b
     e10:	9c 87       	std	Y+12, r25	; 0x0c
     e12:	ad 87       	std	Y+13, r26	; 0x0d
     e14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e16:	6b 85       	ldd	r22, Y+11	; 0x0b
     e18:	7c 85       	ldd	r23, Y+12	; 0x0c
     e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e1c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	4a e7       	ldi	r20, 0x7A	; 122
     e24:	53 e4       	ldi	r21, 0x43	; 67
     e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	8f 83       	std	Y+7, r24	; 0x07
     e30:	98 87       	std	Y+8, r25	; 0x08
     e32:	a9 87       	std	Y+9, r26	; 0x09
     e34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e36:	6f 81       	ldd	r22, Y+7	; 0x07
     e38:	78 85       	ldd	r23, Y+8	; 0x08
     e3a:	89 85       	ldd	r24, Y+9	; 0x09
     e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	40 e8       	ldi	r20, 0x80	; 128
     e44:	5f e3       	ldi	r21, 0x3F	; 63
     e46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e4a:	88 23       	and	r24, r24
     e4c:	2c f4       	brge	.+10     	; 0xe58 <validateTheNewPassWord+0x264>
		__ticks = 1;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	9e 83       	std	Y+6, r25	; 0x06
     e54:	8d 83       	std	Y+5, r24	; 0x05
     e56:	3f c0       	rjmp	.+126    	; 0xed6 <validateTheNewPassWord+0x2e2>
	else if (__tmp > 65535)
     e58:	6f 81       	ldd	r22, Y+7	; 0x07
     e5a:	78 85       	ldd	r23, Y+8	; 0x08
     e5c:	89 85       	ldd	r24, Y+9	; 0x09
     e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	3f ef       	ldi	r19, 0xFF	; 255
     e64:	4f e7       	ldi	r20, 0x7F	; 127
     e66:	57 e4       	ldi	r21, 0x47	; 71
     e68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e6c:	18 16       	cp	r1, r24
     e6e:	4c f5       	brge	.+82     	; 0xec2 <validateTheNewPassWord+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e70:	6b 85       	ldd	r22, Y+11	; 0x0b
     e72:	7c 85       	ldd	r23, Y+12	; 0x0c
     e74:	8d 85       	ldd	r24, Y+13	; 0x0d
     e76:	9e 85       	ldd	r25, Y+14	; 0x0e
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	40 e2       	ldi	r20, 0x20	; 32
     e7e:	51 e4       	ldi	r21, 0x41	; 65
     e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	bc 01       	movw	r22, r24
     e8a:	cd 01       	movw	r24, r26
     e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	9e 83       	std	Y+6, r25	; 0x06
     e96:	8d 83       	std	Y+5, r24	; 0x05
     e98:	0f c0       	rjmp	.+30     	; 0xeb8 <validateTheNewPassWord+0x2c4>
     e9a:	89 e1       	ldi	r24, 0x19	; 25
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	9c 83       	std	Y+4, r25	; 0x04
     ea0:	8b 83       	std	Y+3, r24	; 0x03
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	9c 81       	ldd	r25, Y+4	; 0x04
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <validateTheNewPassWord+0x2b2>
     eaa:	9c 83       	std	Y+4, r25	; 0x04
     eac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eae:	8d 81       	ldd	r24, Y+5	; 0x05
     eb0:	9e 81       	ldd	r25, Y+6	; 0x06
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	9e 83       	std	Y+6, r25	; 0x06
     eb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb8:	8d 81       	ldd	r24, Y+5	; 0x05
     eba:	9e 81       	ldd	r25, Y+6	; 0x06
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	69 f7       	brne	.-38     	; 0xe9a <validateTheNewPassWord+0x2a6>
     ec0:	14 c0       	rjmp	.+40     	; 0xeea <validateTheNewPassWord+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec2:	6f 81       	ldd	r22, Y+7	; 0x07
     ec4:	78 85       	ldd	r23, Y+8	; 0x08
     ec6:	89 85       	ldd	r24, Y+9	; 0x09
     ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	9e 83       	std	Y+6, r25	; 0x06
     ed4:	8d 83       	std	Y+5, r24	; 0x05
     ed6:	8d 81       	ldd	r24, Y+5	; 0x05
     ed8:	9e 81       	ldd	r25, Y+6	; 0x06
     eda:	9a 83       	std	Y+2, r25	; 0x02
     edc:	89 83       	std	Y+1, r24	; 0x01
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	9a 81       	ldd	r25, Y+2	; 0x02
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	f1 f7       	brne	.-4      	; 0xee2 <validateTheNewPassWord+0x2ee>
     ee6:	9a 83       	std	Y+2, r25	; 0x02
     ee8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(15000) ;
		LCD_clearScreen() ;
     eea:	0e 94 c7 18 	call	0x318e	; 0x318e <LCD_clearScreen>
		g_select = 0 ;
     eee:	10 92 77 01 	sts	0x0177, r1
	}
	g_flag = 0 ;
     ef2:	10 92 76 01 	sts	0x0176, r1
	enter = 0 ;
     ef6:	10 92 75 01 	sts	0x0175, r1

	return ;

}
     efa:	aa 96       	adiw	r28, 0x2a	; 42
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	de bf       	out	0x3e, r29	; 62
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	cd bf       	out	0x3d, r28	; 61
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <changePassWord>:




void changePassWord (void){
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
	if(enter == 0 ){
     f14:	80 91 75 01 	lds	r24, 0x0175
     f18:	88 23       	and	r24, r24
     f1a:	b1 f4       	brne	.+44     	; 0xf48 <changePassWord+0x3c>
	    g_flag = 1 ;
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	80 93 76 01 	sts	0x0176, r24
		enter ++ ;
     f22:	80 91 75 01 	lds	r24, 0x0175
     f26:	8f 5f       	subi	r24, 0xFF	; 255
     f28:	80 93 75 01 	sts	0x0175, r24
		LCD_clearScreen() ;
     f2c:	0e 94 c7 18 	call	0x318e	; 0x318e <LCD_clearScreen>
		LCD_displayString("please enter new password : ") ;
     f30:	83 eb       	ldi	r24, 0xB3	; 179
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
		LCD_moveCursor(1,0) ;
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	0e 94 49 18 	call	0x3092	; 0x3092 <LCD_moveCursor>
//		writeNewPw() ;
		g_select = 2 ;
     f40:	82 e0       	ldi	r24, 0x02	; 2
     f42:	80 93 77 01 	sts	0x0177, r24
     f46:	19 c0       	rjmp	.+50     	; 0xf7a <changePassWord+0x6e>
		return ;
	}else if(enter == 1 ){
     f48:	80 91 75 01 	lds	r24, 0x0175
     f4c:	81 30       	cpi	r24, 0x01	; 1
     f4e:	a9 f4       	brne	.+42     	; 0xf7a <changePassWord+0x6e>
	    g_flag = 2 ;
     f50:	82 e0       	ldi	r24, 0x02	; 2
     f52:	80 93 76 01 	sts	0x0176, r24
		enter ++ ;
     f56:	80 91 75 01 	lds	r24, 0x0175
     f5a:	8f 5f       	subi	r24, 0xFF	; 255
     f5c:	80 93 75 01 	sts	0x0175, r24
		LCD_clearScreen() ;
     f60:	0e 94 c7 18 	call	0x318e	; 0x318e <LCD_clearScreen>
		LCD_displayString("please Re-enter new password : ");
     f64:	80 ed       	ldi	r24, 0xD0	; 208
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
		LCD_moveCursor(1,0) ;
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	0e 94 49 18 	call	0x3092	; 0x3092 <LCD_moveCursor>
//		writeNewPw() ;
		g_select = 2 ;
     f74:	82 e0       	ldi	r24, 0x02	; 2
     f76:	80 93 77 01 	sts	0x0177, r24

	}

	return ;

}
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <checkPassWord>:


void checkPassWord (){
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	6c 97       	sbiw	r28, 0x1c	; 28
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
	if(UART_recieveByte() == NOT_MATCH){
     f94:	0e 94 aa 19 	call	0x3354	; 0x3354 <UART_recieveByte>
     f98:	8a 3c       	cpi	r24, 0xCA	; 202
     f9a:	09 f0       	breq	.+2      	; 0xf9e <checkPassWord+0x1e>
     f9c:	0c c1       	rjmp	.+536    	; 0x11b6 <checkPassWord+0x236>
		error ++ ;
     f9e:	80 91 74 01 	lds	r24, 0x0174
     fa2:	8f 5f       	subi	r24, 0xFF	; 255
     fa4:	80 93 74 01 	sts	0x0174, r24
		enter = 0 ;
     fa8:	10 92 75 01 	sts	0x0175, r1
		LCD_clearScreen() ;
     fac:	0e 94 c7 18 	call	0x318e	; 0x318e <LCD_clearScreen>
		LCD_displayString("---ERROR!!---");
     fb0:	81 e8       	ldi	r24, 0x81	; 129
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e8       	ldi	r25, 0x80	; 128
     fbc:	ab e3       	ldi	r26, 0x3B	; 59
     fbe:	b5 e4       	ldi	r27, 0x45	; 69
     fc0:	89 8f       	std	Y+25, r24	; 0x19
     fc2:	9a 8f       	std	Y+26, r25	; 0x1a
     fc4:	ab 8f       	std	Y+27, r26	; 0x1b
     fc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc8:	69 8d       	ldd	r22, Y+25	; 0x19
     fca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	4a e7       	ldi	r20, 0x7A	; 122
     fd6:	53 e4       	ldi	r21, 0x43	; 67
     fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fdc:	dc 01       	movw	r26, r24
     fde:	cb 01       	movw	r24, r22
     fe0:	8d 8b       	std	Y+21, r24	; 0x15
     fe2:	9e 8b       	std	Y+22, r25	; 0x16
     fe4:	af 8b       	std	Y+23, r26	; 0x17
     fe6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fe8:	6d 89       	ldd	r22, Y+21	; 0x15
     fea:	7e 89       	ldd	r23, Y+22	; 0x16
     fec:	8f 89       	ldd	r24, Y+23	; 0x17
     fee:	98 8d       	ldd	r25, Y+24	; 0x18
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	40 e8       	ldi	r20, 0x80	; 128
     ff6:	5f e3       	ldi	r21, 0x3F	; 63
     ff8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ffc:	88 23       	and	r24, r24
     ffe:	2c f4       	brge	.+10     	; 0x100a <checkPassWord+0x8a>
		__ticks = 1;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	9c 8b       	std	Y+20, r25	; 0x14
    1006:	8b 8b       	std	Y+19, r24	; 0x13
    1008:	3f c0       	rjmp	.+126    	; 0x1088 <checkPassWord+0x108>
	else if (__tmp > 65535)
    100a:	6d 89       	ldd	r22, Y+21	; 0x15
    100c:	7e 89       	ldd	r23, Y+22	; 0x16
    100e:	8f 89       	ldd	r24, Y+23	; 0x17
    1010:	98 8d       	ldd	r25, Y+24	; 0x18
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	3f ef       	ldi	r19, 0xFF	; 255
    1016:	4f e7       	ldi	r20, 0x7F	; 127
    1018:	57 e4       	ldi	r21, 0x47	; 71
    101a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    101e:	18 16       	cp	r1, r24
    1020:	4c f5       	brge	.+82     	; 0x1074 <checkPassWord+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1022:	69 8d       	ldd	r22, Y+25	; 0x19
    1024:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1026:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1028:	9c 8d       	ldd	r25, Y+28	; 0x1c
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	40 e2       	ldi	r20, 0x20	; 32
    1030:	51 e4       	ldi	r21, 0x41	; 65
    1032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	bc 01       	movw	r22, r24
    103c:	cd 01       	movw	r24, r26
    103e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	9c 8b       	std	Y+20, r25	; 0x14
    1048:	8b 8b       	std	Y+19, r24	; 0x13
    104a:	0f c0       	rjmp	.+30     	; 0x106a <checkPassWord+0xea>
    104c:	89 e1       	ldi	r24, 0x19	; 25
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	9a 8b       	std	Y+18, r25	; 0x12
    1052:	89 8b       	std	Y+17, r24	; 0x11
    1054:	89 89       	ldd	r24, Y+17	; 0x11
    1056:	9a 89       	ldd	r25, Y+18	; 0x12
    1058:	01 97       	sbiw	r24, 0x01	; 1
    105a:	f1 f7       	brne	.-4      	; 0x1058 <checkPassWord+0xd8>
    105c:	9a 8b       	std	Y+18, r25	; 0x12
    105e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1060:	8b 89       	ldd	r24, Y+19	; 0x13
    1062:	9c 89       	ldd	r25, Y+20	; 0x14
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	9c 8b       	std	Y+20, r25	; 0x14
    1068:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    106a:	8b 89       	ldd	r24, Y+19	; 0x13
    106c:	9c 89       	ldd	r25, Y+20	; 0x14
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	69 f7       	brne	.-38     	; 0x104c <checkPassWord+0xcc>
    1072:	14 c0       	rjmp	.+40     	; 0x109c <checkPassWord+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1074:	6d 89       	ldd	r22, Y+21	; 0x15
    1076:	7e 89       	ldd	r23, Y+22	; 0x16
    1078:	8f 89       	ldd	r24, Y+23	; 0x17
    107a:	98 8d       	ldd	r25, Y+24	; 0x18
    107c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	9c 8b       	std	Y+20, r25	; 0x14
    1086:	8b 8b       	std	Y+19, r24	; 0x13
    1088:	8b 89       	ldd	r24, Y+19	; 0x13
    108a:	9c 89       	ldd	r25, Y+20	; 0x14
    108c:	98 8b       	std	Y+16, r25	; 0x10
    108e:	8f 87       	std	Y+15, r24	; 0x0f
    1090:	8f 85       	ldd	r24, Y+15	; 0x0f
    1092:	98 89       	ldd	r25, Y+16	; 0x10
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	f1 f7       	brne	.-4      	; 0x1094 <checkPassWord+0x114>
    1098:	98 8b       	std	Y+16, r25	; 0x10
    109a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(3000) ;
		if(error == MAX_NUMBER_OF_ERRORS){
    109c:	80 91 74 01 	lds	r24, 0x0174
    10a0:	83 30       	cpi	r24, 0x03	; 3
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <checkPassWord+0x126>
    10a4:	84 c0       	rjmp	.+264    	; 0x11ae <checkPassWord+0x22e>
			error = 0 ;
    10a6:	10 92 74 01 	sts	0x0174, r1
			LCD_clearScreen() ;
    10aa:	0e 94 c7 18 	call	0x318e	; 0x318e <LCD_clearScreen>
			LCD_displayString("THEIVES!!! ");
    10ae:	80 ef       	ldi	r24, 0xF0	; 240
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	90 e8       	ldi	r25, 0x80	; 128
    10ba:	ab e3       	ldi	r26, 0x3B	; 59
    10bc:	b5 e4       	ldi	r27, 0x45	; 69
    10be:	8b 87       	std	Y+11, r24	; 0x0b
    10c0:	9c 87       	std	Y+12, r25	; 0x0c
    10c2:	ad 87       	std	Y+13, r26	; 0x0d
    10c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    10cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	4a e7       	ldi	r20, 0x7A	; 122
    10d4:	53 e4       	ldi	r21, 0x43	; 67
    10d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	8f 83       	std	Y+7, r24	; 0x07
    10e0:	98 87       	std	Y+8, r25	; 0x08
    10e2:	a9 87       	std	Y+9, r26	; 0x09
    10e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10e6:	6f 81       	ldd	r22, Y+7	; 0x07
    10e8:	78 85       	ldd	r23, Y+8	; 0x08
    10ea:	89 85       	ldd	r24, Y+9	; 0x09
    10ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	40 e8       	ldi	r20, 0x80	; 128
    10f4:	5f e3       	ldi	r21, 0x3F	; 63
    10f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10fa:	88 23       	and	r24, r24
    10fc:	2c f4       	brge	.+10     	; 0x1108 <checkPassWord+0x188>
		__ticks = 1;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	9e 83       	std	Y+6, r25	; 0x06
    1104:	8d 83       	std	Y+5, r24	; 0x05
    1106:	3f c0       	rjmp	.+126    	; 0x1186 <checkPassWord+0x206>
	else if (__tmp > 65535)
    1108:	6f 81       	ldd	r22, Y+7	; 0x07
    110a:	78 85       	ldd	r23, Y+8	; 0x08
    110c:	89 85       	ldd	r24, Y+9	; 0x09
    110e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	3f ef       	ldi	r19, 0xFF	; 255
    1114:	4f e7       	ldi	r20, 0x7F	; 127
    1116:	57 e4       	ldi	r21, 0x47	; 71
    1118:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    111c:	18 16       	cp	r1, r24
    111e:	4c f5       	brge	.+82     	; 0x1172 <checkPassWord+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1120:	6b 85       	ldd	r22, Y+11	; 0x0b
    1122:	7c 85       	ldd	r23, Y+12	; 0x0c
    1124:	8d 85       	ldd	r24, Y+13	; 0x0d
    1126:	9e 85       	ldd	r25, Y+14	; 0x0e
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	40 e2       	ldi	r20, 0x20	; 32
    112e:	51 e4       	ldi	r21, 0x41	; 65
    1130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	bc 01       	movw	r22, r24
    113a:	cd 01       	movw	r24, r26
    113c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	9e 83       	std	Y+6, r25	; 0x06
    1146:	8d 83       	std	Y+5, r24	; 0x05
    1148:	0f c0       	rjmp	.+30     	; 0x1168 <checkPassWord+0x1e8>
    114a:	89 e1       	ldi	r24, 0x19	; 25
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	9c 83       	std	Y+4, r25	; 0x04
    1150:	8b 83       	std	Y+3, r24	; 0x03
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <checkPassWord+0x1d6>
    115a:	9c 83       	std	Y+4, r25	; 0x04
    115c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115e:	8d 81       	ldd	r24, Y+5	; 0x05
    1160:	9e 81       	ldd	r25, Y+6	; 0x06
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	9e 83       	std	Y+6, r25	; 0x06
    1166:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1168:	8d 81       	ldd	r24, Y+5	; 0x05
    116a:	9e 81       	ldd	r25, Y+6	; 0x06
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	69 f7       	brne	.-38     	; 0x114a <checkPassWord+0x1ca>
    1170:	14 c0       	rjmp	.+40     	; 0x119a <checkPassWord+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1172:	6f 81       	ldd	r22, Y+7	; 0x07
    1174:	78 85       	ldd	r23, Y+8	; 0x08
    1176:	89 85       	ldd	r24, Y+9	; 0x09
    1178:	9a 85       	ldd	r25, Y+10	; 0x0a
    117a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	9e 83       	std	Y+6, r25	; 0x06
    1184:	8d 83       	std	Y+5, r24	; 0x05
    1186:	8d 81       	ldd	r24, Y+5	; 0x05
    1188:	9e 81       	ldd	r25, Y+6	; 0x06
    118a:	9a 83       	std	Y+2, r25	; 0x02
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	9a 81       	ldd	r25, Y+2	; 0x02
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	f1 f7       	brne	.-4      	; 0x1192 <checkPassWord+0x212>
    1196:	9a 83       	std	Y+2, r25	; 0x02
    1198:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(3000) ;
			UART_sendByte(THIEVES) ;
    119a:	83 ee       	ldi	r24, 0xE3	; 227
    119c:	0e 94 93 19 	call	0x3326	; 0x3326 <UART_sendByte>
			while(UART_recieveByte() != DONE){} ;
    11a0:	0e 94 aa 19 	call	0x3354	; 0x3354 <UART_recieveByte>
    11a4:	82 32       	cpi	r24, 0x22	; 34
    11a6:	e1 f7       	brne	.-8      	; 0x11a0 <checkPassWord+0x220>
			g_select = 0 ;
    11a8:	10 92 77 01 	sts	0x0177, r1
    11ac:	09 c0       	rjmp	.+18     	; 0x11c0 <checkPassWord+0x240>
			return ;
		}
		g_select = 1 ;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	80 93 77 01 	sts	0x0177, r24
    11b4:	05 c0       	rjmp	.+10     	; 0x11c0 <checkPassWord+0x240>
		return ;

	}else{

		error = 0 ;
    11b6:	10 92 74 01 	sts	0x0174, r1
		g_select = 1 ;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	80 93 77 01 	sts	0x0177, r24
		return ;

	}
}
    11c0:	6c 96       	adiw	r28, 0x1c	; 28
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <writePw>:

//if( ( g_key != '+' && g_key != '-' && g_key != '*' && g_key != '%' && g_key != '=') || (g_key>= 0 && g_key<= 9) )

void writePw (){
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	6d 97       	sbiw	r28, 0x1d	; 29
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
	uint8 count = 0 ;
    11e6:	1d 8e       	std	Y+29, r1	; 0x1d
    11e8:	fd c0       	rjmp	.+506    	; 0x13e4 <writePw+0x212>
	while (count < MAX_NUMBER_OF_PASSWORD_CHARACTERS){
		UART_sendByte(ARE_YOU_READY) ;
    11ea:	8c e1       	ldi	r24, 0x1C	; 28
    11ec:	0e 94 93 19 	call	0x3326	; 0x3326 <UART_sendByte>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	90 e8       	ldi	r25, 0x80	; 128
    11f4:	ab e3       	ldi	r26, 0x3B	; 59
    11f6:	b5 e4       	ldi	r27, 0x45	; 69
    11f8:	89 8f       	std	Y+25, r24	; 0x19
    11fa:	9a 8f       	std	Y+26, r25	; 0x1a
    11fc:	ab 8f       	std	Y+27, r26	; 0x1b
    11fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1200:	69 8d       	ldd	r22, Y+25	; 0x19
    1202:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1204:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1206:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	4a e7       	ldi	r20, 0x7A	; 122
    120e:	53 e4       	ldi	r21, 0x43	; 67
    1210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	8d 8b       	std	Y+21, r24	; 0x15
    121a:	9e 8b       	std	Y+22, r25	; 0x16
    121c:	af 8b       	std	Y+23, r26	; 0x17
    121e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1220:	6d 89       	ldd	r22, Y+21	; 0x15
    1222:	7e 89       	ldd	r23, Y+22	; 0x16
    1224:	8f 89       	ldd	r24, Y+23	; 0x17
    1226:	98 8d       	ldd	r25, Y+24	; 0x18
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	40 e8       	ldi	r20, 0x80	; 128
    122e:	5f e3       	ldi	r21, 0x3F	; 63
    1230:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1234:	88 23       	and	r24, r24
    1236:	2c f4       	brge	.+10     	; 0x1242 <writePw+0x70>
		__ticks = 1;
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	9c 8b       	std	Y+20, r25	; 0x14
    123e:	8b 8b       	std	Y+19, r24	; 0x13
    1240:	3f c0       	rjmp	.+126    	; 0x12c0 <writePw+0xee>
	else if (__tmp > 65535)
    1242:	6d 89       	ldd	r22, Y+21	; 0x15
    1244:	7e 89       	ldd	r23, Y+22	; 0x16
    1246:	8f 89       	ldd	r24, Y+23	; 0x17
    1248:	98 8d       	ldd	r25, Y+24	; 0x18
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	3f ef       	ldi	r19, 0xFF	; 255
    124e:	4f e7       	ldi	r20, 0x7F	; 127
    1250:	57 e4       	ldi	r21, 0x47	; 71
    1252:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1256:	18 16       	cp	r1, r24
    1258:	4c f5       	brge	.+82     	; 0x12ac <writePw+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    125a:	69 8d       	ldd	r22, Y+25	; 0x19
    125c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    125e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1260:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	40 e2       	ldi	r20, 0x20	; 32
    1268:	51 e4       	ldi	r21, 0x41	; 65
    126a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	bc 01       	movw	r22, r24
    1274:	cd 01       	movw	r24, r26
    1276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	9c 8b       	std	Y+20, r25	; 0x14
    1280:	8b 8b       	std	Y+19, r24	; 0x13
    1282:	0f c0       	rjmp	.+30     	; 0x12a2 <writePw+0xd0>
    1284:	89 e1       	ldi	r24, 0x19	; 25
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	9a 8b       	std	Y+18, r25	; 0x12
    128a:	89 8b       	std	Y+17, r24	; 0x11
    128c:	89 89       	ldd	r24, Y+17	; 0x11
    128e:	9a 89       	ldd	r25, Y+18	; 0x12
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	f1 f7       	brne	.-4      	; 0x1290 <writePw+0xbe>
    1294:	9a 8b       	std	Y+18, r25	; 0x12
    1296:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1298:	8b 89       	ldd	r24, Y+19	; 0x13
    129a:	9c 89       	ldd	r25, Y+20	; 0x14
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	9c 8b       	std	Y+20, r25	; 0x14
    12a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a2:	8b 89       	ldd	r24, Y+19	; 0x13
    12a4:	9c 89       	ldd	r25, Y+20	; 0x14
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	69 f7       	brne	.-38     	; 0x1284 <writePw+0xb2>
    12aa:	14 c0       	rjmp	.+40     	; 0x12d4 <writePw+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ac:	6d 89       	ldd	r22, Y+21	; 0x15
    12ae:	7e 89       	ldd	r23, Y+22	; 0x16
    12b0:	8f 89       	ldd	r24, Y+23	; 0x17
    12b2:	98 8d       	ldd	r25, Y+24	; 0x18
    12b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	9c 8b       	std	Y+20, r25	; 0x14
    12be:	8b 8b       	std	Y+19, r24	; 0x13
    12c0:	8b 89       	ldd	r24, Y+19	; 0x13
    12c2:	9c 89       	ldd	r25, Y+20	; 0x14
    12c4:	98 8b       	std	Y+16, r25	; 0x10
    12c6:	8f 87       	std	Y+15, r24	; 0x0f
    12c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ca:	98 89       	ldd	r25, Y+16	; 0x10
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	f1 f7       	brne	.-4      	; 0x12cc <writePw+0xfa>
    12d0:	98 8b       	std	Y+16, r25	; 0x10
    12d2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(3000);
		/* if any switch pressed for more than 1500 ms it counts more than one press */
		key = KEYPAD_getPressedKey() ;
    12d4:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <KEYPAD_getPressedKey>
    12d8:	80 93 7e 01 	sts	0x017E, r24
		while(UART_recieveByte() != DONE ){} ;
    12dc:	0e 94 aa 19 	call	0x3354	; 0x3354 <UART_recieveByte>
    12e0:	82 32       	cpi	r24, 0x22	; 34
    12e2:	e1 f7       	brne	.-8      	; 0x12dc <writePw+0x10a>
		UART_sendByte(key) ;
    12e4:	80 91 7e 01 	lds	r24, 0x017E
    12e8:	0e 94 93 19 	call	0x3326	; 0x3326 <UART_sendByte>
		LCD_displayCharacter('*');
    12ec:	8a e2       	ldi	r24, 0x2A	; 42
    12ee:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_displayCharacter>
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e8       	ldi	r25, 0x80	; 128
    12f6:	ab e3       	ldi	r26, 0x3B	; 59
    12f8:	b5 e4       	ldi	r27, 0x45	; 69
    12fa:	8b 87       	std	Y+11, r24	; 0x0b
    12fc:	9c 87       	std	Y+12, r25	; 0x0c
    12fe:	ad 87       	std	Y+13, r26	; 0x0d
    1300:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1302:	6b 85       	ldd	r22, Y+11	; 0x0b
    1304:	7c 85       	ldd	r23, Y+12	; 0x0c
    1306:	8d 85       	ldd	r24, Y+13	; 0x0d
    1308:	9e 85       	ldd	r25, Y+14	; 0x0e
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	4a e7       	ldi	r20, 0x7A	; 122
    1310:	53 e4       	ldi	r21, 0x43	; 67
    1312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	8f 83       	std	Y+7, r24	; 0x07
    131c:	98 87       	std	Y+8, r25	; 0x08
    131e:	a9 87       	std	Y+9, r26	; 0x09
    1320:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1322:	6f 81       	ldd	r22, Y+7	; 0x07
    1324:	78 85       	ldd	r23, Y+8	; 0x08
    1326:	89 85       	ldd	r24, Y+9	; 0x09
    1328:	9a 85       	ldd	r25, Y+10	; 0x0a
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	40 e8       	ldi	r20, 0x80	; 128
    1330:	5f e3       	ldi	r21, 0x3F	; 63
    1332:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1336:	88 23       	and	r24, r24
    1338:	2c f4       	brge	.+10     	; 0x1344 <writePw+0x172>
		__ticks = 1;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	9e 83       	std	Y+6, r25	; 0x06
    1340:	8d 83       	std	Y+5, r24	; 0x05
    1342:	3f c0       	rjmp	.+126    	; 0x13c2 <writePw+0x1f0>
	else if (__tmp > 65535)
    1344:	6f 81       	ldd	r22, Y+7	; 0x07
    1346:	78 85       	ldd	r23, Y+8	; 0x08
    1348:	89 85       	ldd	r24, Y+9	; 0x09
    134a:	9a 85       	ldd	r25, Y+10	; 0x0a
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	3f ef       	ldi	r19, 0xFF	; 255
    1350:	4f e7       	ldi	r20, 0x7F	; 127
    1352:	57 e4       	ldi	r21, 0x47	; 71
    1354:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1358:	18 16       	cp	r1, r24
    135a:	4c f5       	brge	.+82     	; 0x13ae <writePw+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    135c:	6b 85       	ldd	r22, Y+11	; 0x0b
    135e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1360:	8d 85       	ldd	r24, Y+13	; 0x0d
    1362:	9e 85       	ldd	r25, Y+14	; 0x0e
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 e2       	ldi	r20, 0x20	; 32
    136a:	51 e4       	ldi	r21, 0x41	; 65
    136c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	bc 01       	movw	r22, r24
    1376:	cd 01       	movw	r24, r26
    1378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	9e 83       	std	Y+6, r25	; 0x06
    1382:	8d 83       	std	Y+5, r24	; 0x05
    1384:	0f c0       	rjmp	.+30     	; 0x13a4 <writePw+0x1d2>
    1386:	89 e1       	ldi	r24, 0x19	; 25
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	9c 83       	std	Y+4, r25	; 0x04
    138c:	8b 83       	std	Y+3, r24	; 0x03
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	01 97       	sbiw	r24, 0x01	; 1
    1394:	f1 f7       	brne	.-4      	; 0x1392 <writePw+0x1c0>
    1396:	9c 83       	std	Y+4, r25	; 0x04
    1398:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139a:	8d 81       	ldd	r24, Y+5	; 0x05
    139c:	9e 81       	ldd	r25, Y+6	; 0x06
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	9e 83       	std	Y+6, r25	; 0x06
    13a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a4:	8d 81       	ldd	r24, Y+5	; 0x05
    13a6:	9e 81       	ldd	r25, Y+6	; 0x06
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	69 f7       	brne	.-38     	; 0x1386 <writePw+0x1b4>
    13ac:	14 c0       	rjmp	.+40     	; 0x13d6 <writePw+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ae:	6f 81       	ldd	r22, Y+7	; 0x07
    13b0:	78 85       	ldd	r23, Y+8	; 0x08
    13b2:	89 85       	ldd	r24, Y+9	; 0x09
    13b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	9e 83       	std	Y+6, r25	; 0x06
    13c0:	8d 83       	std	Y+5, r24	; 0x05
    13c2:	8d 81       	ldd	r24, Y+5	; 0x05
    13c4:	9e 81       	ldd	r25, Y+6	; 0x06
    13c6:	9a 83       	std	Y+2, r25	; 0x02
    13c8:	89 83       	std	Y+1, r24	; 0x01
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	9a 81       	ldd	r25, Y+2	; 0x02
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	f1 f7       	brne	.-4      	; 0x13ce <writePw+0x1fc>
    13d2:	9a 83       	std	Y+2, r25	; 0x02
    13d4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3000);
		count++ ;
    13d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13d8:	8f 5f       	subi	r24, 0xFF	; 255
    13da:	8d 8f       	std	Y+29, r24	; 0x1d
		while(UART_recieveByte() != NEXT ){}
    13dc:	0e 94 aa 19 	call	0x3354	; 0x3354 <UART_recieveByte>
    13e0:	85 35       	cpi	r24, 0x55	; 85
    13e2:	e1 f7       	brne	.-8      	; 0x13dc <writePw+0x20a>

//if( ( g_key != '+' && g_key != '-' && g_key != '*' && g_key != '%' && g_key != '=') || (g_key>= 0 && g_key<= 9) )

void writePw (){
	uint8 count = 0 ;
	while (count < MAX_NUMBER_OF_PASSWORD_CHARACTERS){
    13e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13e6:	86 30       	cpi	r24, 0x06	; 6
    13e8:	08 f4       	brcc	.+2      	; 0x13ec <writePw+0x21a>
    13ea:	ff ce       	rjmp	.-514    	; 0x11ea <writePw+0x18>
		LCD_displayCharacter('*');
		_delay_ms(3000);
		count++ ;
		while(UART_recieveByte() != NEXT ){}
	}
	if(g_flag == 0){
    13ec:	80 91 76 01 	lds	r24, 0x0176
    13f0:	88 23       	and	r24, r24
    13f2:	21 f4       	brne	.+8      	; 0x13fc <writePw+0x22a>
    	g_select = 3 ;
    13f4:	83 e0       	ldi	r24, 0x03	; 3
    13f6:	80 93 77 01 	sts	0x0177, r24
    13fa:	0b c0       	rjmp	.+22     	; 0x1412 <writePw+0x240>
	}else if(g_flag == 1){
    13fc:	80 91 76 01 	lds	r24, 0x0176
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	21 f4       	brne	.+8      	; 0x140c <writePw+0x23a>
		g_select = 4 ;
    1404:	84 e0       	ldi	r24, 0x04	; 4
    1406:	80 93 77 01 	sts	0x0177, r24
    140a:	03 c0       	rjmp	.+6      	; 0x1412 <writePw+0x240>
	}else{
		g_select = 5 ;
    140c:	85 e0       	ldi	r24, 0x05	; 5
    140e:	80 93 77 01 	sts	0x0177, r24
	}
	return ;

}
    1412:	6d 96       	adiw	r28, 0x1d	; 29
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <openDoor>:



void openDoor (){
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
	if(enter == 0){
    142c:	80 91 75 01 	lds	r24, 0x0175
    1430:	88 23       	and	r24, r24
    1432:	99 f4       	brne	.+38     	; 0x145a <openDoor+0x36>
		enter ++ ;
    1434:	80 91 75 01 	lds	r24, 0x0175
    1438:	8f 5f       	subi	r24, 0xFF	; 255
    143a:	80 93 75 01 	sts	0x0175, r24
		LCD_clearScreen() ;
    143e:	0e 94 c7 18 	call	0x318e	; 0x318e <LCD_clearScreen>
		LCD_displayString("please enter your password : ");
    1442:	8c ef       	ldi	r24, 0xFC	; 252
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
		LCD_moveCursor(1,0) ;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	0e 94 49 18 	call	0x3092	; 0x3092 <LCD_moveCursor>
		g_select = 2 ;
    1452:	82 e0       	ldi	r24, 0x02	; 2
    1454:	80 93 77 01 	sts	0x0177, r24
    1458:	21 c0       	rjmp	.+66     	; 0x149c <openDoor+0x78>
		//	writePw() ;
		return ;

	}else if(enter == 1){
    145a:	80 91 75 01 	lds	r24, 0x0175
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	b1 f4       	brne	.+44     	; 0x148e <openDoor+0x6a>
		enter ++ ;
    1462:	80 91 75 01 	lds	r24, 0x0175
    1466:	8f 5f       	subi	r24, 0xFF	; 255
    1468:	80 93 75 01 	sts	0x0175, r24
		LCD_clearScreen() ;
    146c:	0e 94 c7 18 	call	0x318e	; 0x318e <LCD_clearScreen>
		UART_sendByte(VALIDATION) ;
    1470:	8f e3       	ldi	r24, 0x3F	; 63
    1472:	0e 94 93 19 	call	0x3326	; 0x3326 <UART_sendByte>
		LCD_displayString("please Re-enter your password : ");
    1476:	8a e1       	ldi	r24, 0x1A	; 26
    1478:	91 e0       	ldi	r25, 0x01	; 1
    147a:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
		LCD_moveCursor(1,0) ;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	0e 94 49 18 	call	0x3092	; 0x3092 <LCD_moveCursor>
		g_select = 2 ;
    1486:	82 e0       	ldi	r24, 0x02	; 2
    1488:	80 93 77 01 	sts	0x0177, r24
    148c:	07 c0       	rjmp	.+14     	; 0x149c <openDoor+0x78>
		//	writePw() ;

	}else{
		enter = 0 ;
    148e:	10 92 75 01 	sts	0x0175, r1
		LCD_clearScreen() ;
    1492:	0e 94 c7 18 	call	0x318e	; 0x318e <LCD_clearScreen>
		g_select = 6 ;
    1496:	86 e0       	ldi	r24, 0x06	; 6
    1498:	80 93 77 01 	sts	0x0177, r24
		return ;
	}
	return ;
	// checkPassWord() ;

}
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <mainOptions>:


void mainOptions (){
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62

	LCD_displayString("+ : Open Door") ;
    14aa:	8b e3       	ldi	r24, 0x3B	; 59
    14ac:	91 e0       	ldi	r25, 0x01	; 1
    14ae:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
	LCD_moveCursor(1,0) ;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	0e 94 49 18 	call	0x3092	; 0x3092 <LCD_moveCursor>
	LCD_displayString("- : Change PassWord") ;
    14ba:	89 e4       	ldi	r24, 0x49	; 73
    14bc:	91 e0       	ldi	r25, 0x01	; 1
    14be:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
	key = KEYPAD_getPressedKey() ;
    14c2:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <KEYPAD_getPressedKey>
    14c6:	80 93 7e 01 	sts	0x017E, r24

	if(key == '+'){
    14ca:	80 91 7e 01 	lds	r24, 0x017E
    14ce:	8b 32       	cpi	r24, 0x2B	; 43
    14d0:	31 f4       	brne	.+12     	; 0x14de <mainOptions+0x3c>
		LCD_clearScreen() ;
    14d2:	0e 94 c7 18 	call	0x318e	; 0x318e <LCD_clearScreen>
		g_select = 1 ;
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	80 93 77 01 	sts	0x0177, r24
    14dc:	05 c0       	rjmp	.+10     	; 0x14e8 <mainOptions+0x46>

	}else{
		LCD_clearScreen() ;
    14de:	0e 94 c7 18 	call	0x318e	; 0x318e <LCD_clearScreen>
		g_select = 4 ;
    14e2:	84 e0       	ldi	r24, 0x04	; 4
    14e4:	80 93 77 01 	sts	0x0177, r24
	}

	return ;
}
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <main>:



int main (void){
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <main+0x6>
    14f4:	0f 92       	push	r0
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
	uint8 x ;
	LCD_init() ;
    14fa:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_init>
	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_init(9600) ;
    14fe:	60 e8       	ldi	r22, 0x80	; 128
    1500:	75 e2       	ldi	r23, 0x25	; 37
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	0e 94 47 19 	call	0x328e	; 0x328e <UART_init>
	SREG |=(1<<7) ;
    150a:	af e5       	ldi	r26, 0x5F	; 95
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	ef e5       	ldi	r30, 0x5F	; 95
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	80 68       	ori	r24, 0x80	; 128
    1516:	8c 93       	st	X, r24
	Timer_setCallBack(secondProcessing) ;
    1518:	8a ed       	ldi	r24, 0xDA	; 218
    151a:	95 e0       	ldi	r25, 0x05	; 5
    151c:	0e 94 35 19 	call	0x326a	; 0x326a <Timer_setCallBack>


	while(1){
		x = g_select ;
    1520:	80 91 77 01 	lds	r24, 0x0177
    1524:	89 83       	std	Y+1, r24	; 0x01

		switch(x){
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	3b 83       	std	Y+3, r19	; 0x03
    152e:	2a 83       	std	Y+2, r18	; 0x02
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	9b 81       	ldd	r25, Y+3	; 0x03
    1534:	83 30       	cpi	r24, 0x03	; 3
    1536:	91 05       	cpc	r25, r1
    1538:	09 f4       	brne	.+2      	; 0x153c <main+0x4e>
    153a:	54 c0       	rjmp	.+168    	; 0x15e4 <main+0xf6>
    153c:	2a 81       	ldd	r18, Y+2	; 0x02
    153e:	3b 81       	ldd	r19, Y+3	; 0x03
    1540:	24 30       	cpi	r18, 0x04	; 4
    1542:	31 05       	cpc	r19, r1
    1544:	7c f4       	brge	.+30     	; 0x1564 <main+0x76>
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	9b 81       	ldd	r25, Y+3	; 0x03
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	91 05       	cpc	r25, r1
    154e:	59 f1       	breq	.+86     	; 0x15a6 <main+0xb8>
    1550:	2a 81       	ldd	r18, Y+2	; 0x02
    1552:	3b 81       	ldd	r19, Y+3	; 0x03
    1554:	22 30       	cpi	r18, 0x02	; 2
    1556:	31 05       	cpc	r19, r1
    1558:	bc f5       	brge	.+110    	; 0x15c8 <main+0xda>
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	9b 81       	ldd	r25, Y+3	; 0x03
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	a1 f0       	breq	.+40     	; 0x158a <main+0x9c>
    1562:	de cf       	rjmp	.-68     	; 0x1520 <main+0x32>
    1564:	2a 81       	ldd	r18, Y+2	; 0x02
    1566:	3b 81       	ldd	r19, Y+3	; 0x03
    1568:	25 30       	cpi	r18, 0x05	; 5
    156a:	31 05       	cpc	r19, r1
    156c:	09 f4       	brne	.+2      	; 0x1570 <main+0x82>
    156e:	73 c0       	rjmp	.+230    	; 0x1656 <main+0x168>
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	9b 81       	ldd	r25, Y+3	; 0x03
    1574:	85 30       	cpi	r24, 0x05	; 5
    1576:	91 05       	cpc	r25, r1
    1578:	0c f4       	brge	.+2      	; 0x157c <main+0x8e>
    157a:	42 c0       	rjmp	.+132    	; 0x1600 <main+0x112>
    157c:	2a 81       	ldd	r18, Y+2	; 0x02
    157e:	3b 81       	ldd	r19, Y+3	; 0x03
    1580:	26 30       	cpi	r18, 0x06	; 6
    1582:	31 05       	cpc	r19, r1
    1584:	09 f4       	brne	.+2      	; 0x1588 <main+0x9a>
    1586:	75 c0       	rjmp	.+234    	; 0x1672 <main+0x184>
    1588:	cb cf       	rjmp	.-106    	; 0x1520 <main+0x32>

		case 0:
			(*selFunc[g_select])() ;
    158a:	80 91 77 01 	lds	r24, 0x0177
    158e:	88 2f       	mov	r24, r24
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	fc 01       	movw	r30, r24
    1598:	eb 59       	subi	r30, 0x9B	; 155
    159a:	fe 4f       	sbci	r31, 0xFE	; 254
    159c:	01 90       	ld	r0, Z+
    159e:	f0 81       	ld	r31, Z
    15a0:	e0 2d       	mov	r30, r0
    15a2:	09 95       	icall
    15a4:	bd cf       	rjmp	.-134    	; 0x1520 <main+0x32>
			break ;

		case 1:
			UART_sendByte(VALIDATION) ;
    15a6:	8f e3       	ldi	r24, 0x3F	; 63
    15a8:	0e 94 93 19 	call	0x3326	; 0x3326 <UART_sendByte>
			(*selFunc[g_select])() ;
    15ac:	80 91 77 01 	lds	r24, 0x0177
    15b0:	88 2f       	mov	r24, r24
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	fc 01       	movw	r30, r24
    15ba:	eb 59       	subi	r30, 0x9B	; 155
    15bc:	fe 4f       	sbci	r31, 0xFE	; 254
    15be:	01 90       	ld	r0, Z+
    15c0:	f0 81       	ld	r31, Z
    15c2:	e0 2d       	mov	r30, r0
    15c4:	09 95       	icall
    15c6:	ac cf       	rjmp	.-168    	; 0x1520 <main+0x32>
			break ;

		case 2:
			(*selFunc[g_select])() ;
    15c8:	80 91 77 01 	lds	r24, 0x0177
    15cc:	88 2f       	mov	r24, r24
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	fc 01       	movw	r30, r24
    15d6:	eb 59       	subi	r30, 0x9B	; 155
    15d8:	fe 4f       	sbci	r31, 0xFE	; 254
    15da:	01 90       	ld	r0, Z+
    15dc:	f0 81       	ld	r31, Z
    15de:	e0 2d       	mov	r30, r0
    15e0:	09 95       	icall
    15e2:	9e cf       	rjmp	.-196    	; 0x1520 <main+0x32>
			break ;

		case 3:
			(*selFunc[g_select])() ;
    15e4:	80 91 77 01 	lds	r24, 0x0177
    15e8:	88 2f       	mov	r24, r24
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	fc 01       	movw	r30, r24
    15f2:	eb 59       	subi	r30, 0x9B	; 155
    15f4:	fe 4f       	sbci	r31, 0xFE	; 254
    15f6:	01 90       	ld	r0, Z+
    15f8:	f0 81       	ld	r31, Z
    15fa:	e0 2d       	mov	r30, r0
    15fc:	09 95       	icall
    15fe:	90 cf       	rjmp	.-224    	; 0x1520 <main+0x32>
			break ;

		case 4:
			if (g_flag == 0){
    1600:	80 91 76 01 	lds	r24, 0x0176
    1604:	88 23       	and	r24, r24
    1606:	89 f4       	brne	.+34     	; 0x162a <main+0x13c>
				UART_sendByte(CHANGE_PASSWORD) ;
    1608:	81 ea       	ldi	r24, 0xA1	; 161
    160a:	0e 94 93 19 	call	0x3326	; 0x3326 <UART_sendByte>
				(*selFunc[g_select])() ;
    160e:	80 91 77 01 	lds	r24, 0x0177
    1612:	88 2f       	mov	r24, r24
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	fc 01       	movw	r30, r24
    161c:	eb 59       	subi	r30, 0x9B	; 155
    161e:	fe 4f       	sbci	r31, 0xFE	; 254
    1620:	01 90       	ld	r0, Z+
    1622:	f0 81       	ld	r31, Z
    1624:	e0 2d       	mov	r30, r0
    1626:	09 95       	icall
    1628:	7b cf       	rjmp	.-266    	; 0x1520 <main+0x32>

			}else{

				if (g_flag == 1){
    162a:	80 91 76 01 	lds	r24, 0x0176
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	09 f0       	breq	.+2      	; 0x1634 <main+0x146>
    1632:	76 cf       	rjmp	.-276    	; 0x1520 <main+0x32>
					UART_sendByte(SAVE_PASSWORD) ;
    1634:	89 e1       	ldi	r24, 0x19	; 25
    1636:	0e 94 93 19 	call	0x3326	; 0x3326 <UART_sendByte>
					(*selFunc[g_select])() ;
    163a:	80 91 77 01 	lds	r24, 0x0177
    163e:	88 2f       	mov	r24, r24
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	fc 01       	movw	r30, r24
    1648:	eb 59       	subi	r30, 0x9B	; 155
    164a:	fe 4f       	sbci	r31, 0xFE	; 254
    164c:	01 90       	ld	r0, Z+
    164e:	f0 81       	ld	r31, Z
    1650:	e0 2d       	mov	r30, r0
    1652:	09 95       	icall
    1654:	65 cf       	rjmp	.-310    	; 0x1520 <main+0x32>
				}
			}
			break ;

		case 5:
			(*selFunc[g_select])() ;
    1656:	80 91 77 01 	lds	r24, 0x0177
    165a:	88 2f       	mov	r24, r24
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	fc 01       	movw	r30, r24
    1664:	eb 59       	subi	r30, 0x9B	; 155
    1666:	fe 4f       	sbci	r31, 0xFE	; 254
    1668:	01 90       	ld	r0, Z+
    166a:	f0 81       	ld	r31, Z
    166c:	e0 2d       	mov	r30, r0
    166e:	09 95       	icall
    1670:	57 cf       	rjmp	.-338    	; 0x1520 <main+0x32>
			break ;

		case 6:
			UART_sendByte(MOTOR_CONFIGURATION) ;
    1672:	89 e0       	ldi	r24, 0x09	; 9
    1674:	0e 94 93 19 	call	0x3326	; 0x3326 <UART_sendByte>
		//  while(UART_recieveByte() != DONE){} ;
			(*selFunc[g_select])() ;
    1678:	80 91 77 01 	lds	r24, 0x0177
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	fc 01       	movw	r30, r24
    1686:	eb 59       	subi	r30, 0x9B	; 155
    1688:	fe 4f       	sbci	r31, 0xFE	; 254
    168a:	01 90       	ld	r0, Z+
    168c:	f0 81       	ld	r31, Z
    168e:	e0 2d       	mov	r30, r0
    1690:	09 95       	icall
    1692:	46 cf       	rjmp	.-372    	; 0x1520 <main+0x32>

00001694 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	00 d0       	rcall	.+0      	; 0x169a <GPIO_setupPinDirection+0x6>
    169a:	00 d0       	rcall	.+0      	; 0x169c <GPIO_setupPinDirection+0x8>
    169c:	0f 92       	push	r0
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	6a 83       	std	Y+2, r22	; 0x02
    16a6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	88 30       	cpi	r24, 0x08	; 8
    16ac:	08 f0       	brcs	.+2      	; 0x16b0 <GPIO_setupPinDirection+0x1c>
    16ae:	d5 c0       	rjmp	.+426    	; 0x185a <GPIO_setupPinDirection+0x1c6>
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	84 30       	cpi	r24, 0x04	; 4
    16b4:	08 f0       	brcs	.+2      	; 0x16b8 <GPIO_setupPinDirection+0x24>
    16b6:	d1 c0       	rjmp	.+418    	; 0x185a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	3d 83       	std	Y+5, r19	; 0x05
    16c0:	2c 83       	std	Y+4, r18	; 0x04
    16c2:	8c 81       	ldd	r24, Y+4	; 0x04
    16c4:	9d 81       	ldd	r25, Y+5	; 0x05
    16c6:	81 30       	cpi	r24, 0x01	; 1
    16c8:	91 05       	cpc	r25, r1
    16ca:	09 f4       	brne	.+2      	; 0x16ce <GPIO_setupPinDirection+0x3a>
    16cc:	43 c0       	rjmp	.+134    	; 0x1754 <GPIO_setupPinDirection+0xc0>
    16ce:	2c 81       	ldd	r18, Y+4	; 0x04
    16d0:	3d 81       	ldd	r19, Y+5	; 0x05
    16d2:	22 30       	cpi	r18, 0x02	; 2
    16d4:	31 05       	cpc	r19, r1
    16d6:	2c f4       	brge	.+10     	; 0x16e2 <GPIO_setupPinDirection+0x4e>
    16d8:	8c 81       	ldd	r24, Y+4	; 0x04
    16da:	9d 81       	ldd	r25, Y+5	; 0x05
    16dc:	00 97       	sbiw	r24, 0x00	; 0
    16de:	71 f0       	breq	.+28     	; 0x16fc <GPIO_setupPinDirection+0x68>
    16e0:	bc c0       	rjmp	.+376    	; 0x185a <GPIO_setupPinDirection+0x1c6>
    16e2:	2c 81       	ldd	r18, Y+4	; 0x04
    16e4:	3d 81       	ldd	r19, Y+5	; 0x05
    16e6:	22 30       	cpi	r18, 0x02	; 2
    16e8:	31 05       	cpc	r19, r1
    16ea:	09 f4       	brne	.+2      	; 0x16ee <GPIO_setupPinDirection+0x5a>
    16ec:	5f c0       	rjmp	.+190    	; 0x17ac <GPIO_setupPinDirection+0x118>
    16ee:	8c 81       	ldd	r24, Y+4	; 0x04
    16f0:	9d 81       	ldd	r25, Y+5	; 0x05
    16f2:	83 30       	cpi	r24, 0x03	; 3
    16f4:	91 05       	cpc	r25, r1
    16f6:	09 f4       	brne	.+2      	; 0x16fa <GPIO_setupPinDirection+0x66>
    16f8:	85 c0       	rjmp	.+266    	; 0x1804 <GPIO_setupPinDirection+0x170>
    16fa:	af c0       	rjmp	.+350    	; 0x185a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	81 30       	cpi	r24, 0x01	; 1
    1700:	a1 f4       	brne	.+40     	; 0x172a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1702:	aa e3       	ldi	r26, 0x3A	; 58
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	ea e3       	ldi	r30, 0x3A	; 58
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <GPIO_setupPinDirection+0x8c>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <GPIO_setupPinDirection+0x88>
    1724:	84 2b       	or	r24, r20
    1726:	8c 93       	st	X, r24
    1728:	98 c0       	rjmp	.+304    	; 0x185a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    172a:	aa e3       	ldi	r26, 0x3A	; 58
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	ea e3       	ldi	r30, 0x3A	; 58
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	48 2f       	mov	r20, r24
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 2e       	mov	r0, r18
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <GPIO_setupPinDirection+0xb4>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	0a 94       	dec	r0
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <GPIO_setupPinDirection+0xb0>
    174c:	80 95       	com	r24
    174e:	84 23       	and	r24, r20
    1750:	8c 93       	st	X, r24
    1752:	83 c0       	rjmp	.+262    	; 0x185a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	a1 f4       	brne	.+40     	; 0x1782 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    175a:	a7 e3       	ldi	r26, 0x37	; 55
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e7 e3       	ldi	r30, 0x37	; 55
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	48 2f       	mov	r20, r24
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	02 2e       	mov	r0, r18
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <GPIO_setupPinDirection+0xe4>
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	0a 94       	dec	r0
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <GPIO_setupPinDirection+0xe0>
    177c:	84 2b       	or	r24, r20
    177e:	8c 93       	st	X, r24
    1780:	6c c0       	rjmp	.+216    	; 0x185a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1782:	a7 e3       	ldi	r26, 0x37	; 55
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e7 e3       	ldi	r30, 0x37	; 55
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	48 2f       	mov	r20, r24
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 2e       	mov	r0, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <GPIO_setupPinDirection+0x10c>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	0a 94       	dec	r0
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <GPIO_setupPinDirection+0x108>
    17a4:	80 95       	com	r24
    17a6:	84 23       	and	r24, r20
    17a8:	8c 93       	st	X, r24
    17aa:	57 c0       	rjmp	.+174    	; 0x185a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	81 30       	cpi	r24, 0x01	; 1
    17b0:	a1 f4       	brne	.+40     	; 0x17da <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    17b2:	a4 e3       	ldi	r26, 0x34	; 52
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e4 e3       	ldi	r30, 0x34	; 52
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	48 2f       	mov	r20, r24
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	02 2e       	mov	r0, r18
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <GPIO_setupPinDirection+0x13c>
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	0a 94       	dec	r0
    17d2:	e2 f7       	brpl	.-8      	; 0x17cc <GPIO_setupPinDirection+0x138>
    17d4:	84 2b       	or	r24, r20
    17d6:	8c 93       	st	X, r24
    17d8:	40 c0       	rjmp	.+128    	; 0x185a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    17da:	a4 e3       	ldi	r26, 0x34	; 52
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e4 e3       	ldi	r30, 0x34	; 52
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	48 2f       	mov	r20, r24
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	02 2e       	mov	r0, r18
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <GPIO_setupPinDirection+0x164>
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	0a 94       	dec	r0
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <GPIO_setupPinDirection+0x160>
    17fc:	80 95       	com	r24
    17fe:	84 23       	and	r24, r20
    1800:	8c 93       	st	X, r24
    1802:	2b c0       	rjmp	.+86     	; 0x185a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	81 30       	cpi	r24, 0x01	; 1
    1808:	a1 f4       	brne	.+40     	; 0x1832 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    180a:	a1 e3       	ldi	r26, 0x31	; 49
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e1 e3       	ldi	r30, 0x31	; 49
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	48 2f       	mov	r20, r24
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	02 2e       	mov	r0, r18
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <GPIO_setupPinDirection+0x194>
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	0a 94       	dec	r0
    182a:	e2 f7       	brpl	.-8      	; 0x1824 <GPIO_setupPinDirection+0x190>
    182c:	84 2b       	or	r24, r20
    182e:	8c 93       	st	X, r24
    1830:	14 c0       	rjmp	.+40     	; 0x185a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1832:	a1 e3       	ldi	r26, 0x31	; 49
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e1 e3       	ldi	r30, 0x31	; 49
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	48 2f       	mov	r20, r24
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	02 2e       	mov	r0, r18
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <GPIO_setupPinDirection+0x1bc>
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	0a 94       	dec	r0
    1852:	e2 f7       	brpl	.-8      	; 0x184c <GPIO_setupPinDirection+0x1b8>
    1854:	80 95       	com	r24
    1856:	84 23       	and	r24, r20
    1858:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	00 d0       	rcall	.+0      	; 0x1870 <GPIO_writePin+0x6>
    1870:	00 d0       	rcall	.+0      	; 0x1872 <GPIO_writePin+0x8>
    1872:	0f 92       	push	r0
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	89 83       	std	Y+1, r24	; 0x01
    187a:	6a 83       	std	Y+2, r22	; 0x02
    187c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	88 30       	cpi	r24, 0x08	; 8
    1882:	08 f0       	brcs	.+2      	; 0x1886 <GPIO_writePin+0x1c>
    1884:	d5 c0       	rjmp	.+426    	; 0x1a30 <GPIO_writePin+0x1c6>
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	84 30       	cpi	r24, 0x04	; 4
    188a:	08 f0       	brcs	.+2      	; 0x188e <GPIO_writePin+0x24>
    188c:	d1 c0       	rjmp	.+418    	; 0x1a30 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	3d 83       	std	Y+5, r19	; 0x05
    1896:	2c 83       	std	Y+4, r18	; 0x04
    1898:	8c 81       	ldd	r24, Y+4	; 0x04
    189a:	9d 81       	ldd	r25, Y+5	; 0x05
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	91 05       	cpc	r25, r1
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <GPIO_writePin+0x3a>
    18a2:	43 c0       	rjmp	.+134    	; 0x192a <GPIO_writePin+0xc0>
    18a4:	2c 81       	ldd	r18, Y+4	; 0x04
    18a6:	3d 81       	ldd	r19, Y+5	; 0x05
    18a8:	22 30       	cpi	r18, 0x02	; 2
    18aa:	31 05       	cpc	r19, r1
    18ac:	2c f4       	brge	.+10     	; 0x18b8 <GPIO_writePin+0x4e>
    18ae:	8c 81       	ldd	r24, Y+4	; 0x04
    18b0:	9d 81       	ldd	r25, Y+5	; 0x05
    18b2:	00 97       	sbiw	r24, 0x00	; 0
    18b4:	71 f0       	breq	.+28     	; 0x18d2 <GPIO_writePin+0x68>
    18b6:	bc c0       	rjmp	.+376    	; 0x1a30 <GPIO_writePin+0x1c6>
    18b8:	2c 81       	ldd	r18, Y+4	; 0x04
    18ba:	3d 81       	ldd	r19, Y+5	; 0x05
    18bc:	22 30       	cpi	r18, 0x02	; 2
    18be:	31 05       	cpc	r19, r1
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <GPIO_writePin+0x5a>
    18c2:	5f c0       	rjmp	.+190    	; 0x1982 <GPIO_writePin+0x118>
    18c4:	8c 81       	ldd	r24, Y+4	; 0x04
    18c6:	9d 81       	ldd	r25, Y+5	; 0x05
    18c8:	83 30       	cpi	r24, 0x03	; 3
    18ca:	91 05       	cpc	r25, r1
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <GPIO_writePin+0x66>
    18ce:	85 c0       	rjmp	.+266    	; 0x19da <GPIO_writePin+0x170>
    18d0:	af c0       	rjmp	.+350    	; 0x1a30 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	81 30       	cpi	r24, 0x01	; 1
    18d6:	a1 f4       	brne	.+40     	; 0x1900 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    18d8:	ab e3       	ldi	r26, 0x3B	; 59
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	eb e3       	ldi	r30, 0x3B	; 59
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	48 2f       	mov	r20, r24
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 2e       	mov	r0, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <GPIO_writePin+0x8c>
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	0a 94       	dec	r0
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <GPIO_writePin+0x88>
    18fa:	84 2b       	or	r24, r20
    18fc:	8c 93       	st	X, r24
    18fe:	98 c0       	rjmp	.+304    	; 0x1a30 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1900:	ab e3       	ldi	r26, 0x3B	; 59
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	eb e3       	ldi	r30, 0x3B	; 59
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	48 2f       	mov	r20, r24
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 2e       	mov	r0, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <GPIO_writePin+0xb4>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	0a 94       	dec	r0
    1920:	e2 f7       	brpl	.-8      	; 0x191a <GPIO_writePin+0xb0>
    1922:	80 95       	com	r24
    1924:	84 23       	and	r24, r20
    1926:	8c 93       	st	X, r24
    1928:	83 c0       	rjmp	.+262    	; 0x1a30 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	81 30       	cpi	r24, 0x01	; 1
    192e:	a1 f4       	brne	.+40     	; 0x1958 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1930:	a8 e3       	ldi	r26, 0x38	; 56
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e8 e3       	ldi	r30, 0x38	; 56
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	48 2f       	mov	r20, r24
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	02 2e       	mov	r0, r18
    1948:	02 c0       	rjmp	.+4      	; 0x194e <GPIO_writePin+0xe4>
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	0a 94       	dec	r0
    1950:	e2 f7       	brpl	.-8      	; 0x194a <GPIO_writePin+0xe0>
    1952:	84 2b       	or	r24, r20
    1954:	8c 93       	st	X, r24
    1956:	6c c0       	rjmp	.+216    	; 0x1a30 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1958:	a8 e3       	ldi	r26, 0x38	; 56
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e8 e3       	ldi	r30, 0x38	; 56
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	48 2f       	mov	r20, r24
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	02 2e       	mov	r0, r18
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <GPIO_writePin+0x10c>
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	0a 94       	dec	r0
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <GPIO_writePin+0x108>
    197a:	80 95       	com	r24
    197c:	84 23       	and	r24, r20
    197e:	8c 93       	st	X, r24
    1980:	57 c0       	rjmp	.+174    	; 0x1a30 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	81 30       	cpi	r24, 0x01	; 1
    1986:	a1 f4       	brne	.+40     	; 0x19b0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1988:	a5 e3       	ldi	r26, 0x35	; 53
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e5 e3       	ldi	r30, 0x35	; 53
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	48 2f       	mov	r20, r24
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	02 2e       	mov	r0, r18
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <GPIO_writePin+0x13c>
    19a2:	88 0f       	add	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	0a 94       	dec	r0
    19a8:	e2 f7       	brpl	.-8      	; 0x19a2 <GPIO_writePin+0x138>
    19aa:	84 2b       	or	r24, r20
    19ac:	8c 93       	st	X, r24
    19ae:	40 c0       	rjmp	.+128    	; 0x1a30 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    19b0:	a5 e3       	ldi	r26, 0x35	; 53
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e5 e3       	ldi	r30, 0x35	; 53
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	48 2f       	mov	r20, r24
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 2e       	mov	r0, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <GPIO_writePin+0x164>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	0a 94       	dec	r0
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <GPIO_writePin+0x160>
    19d2:	80 95       	com	r24
    19d4:	84 23       	and	r24, r20
    19d6:	8c 93       	st	X, r24
    19d8:	2b c0       	rjmp	.+86     	; 0x1a30 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	81 30       	cpi	r24, 0x01	; 1
    19de:	a1 f4       	brne	.+40     	; 0x1a08 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    19e0:	a2 e3       	ldi	r26, 0x32	; 50
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e2 e3       	ldi	r30, 0x32	; 50
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	48 2f       	mov	r20, r24
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	02 2e       	mov	r0, r18
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <GPIO_writePin+0x194>
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	0a 94       	dec	r0
    1a00:	e2 f7       	brpl	.-8      	; 0x19fa <GPIO_writePin+0x190>
    1a02:	84 2b       	or	r24, r20
    1a04:	8c 93       	st	X, r24
    1a06:	14 c0       	rjmp	.+40     	; 0x1a30 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1a08:	a2 e3       	ldi	r26, 0x32	; 50
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	e2 e3       	ldi	r30, 0x32	; 50
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	48 2f       	mov	r20, r24
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	02 2e       	mov	r0, r18
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <GPIO_writePin+0x1bc>
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	0a 94       	dec	r0
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <GPIO_writePin+0x1b8>
    1a2a:	80 95       	com	r24
    1a2c:	84 23       	and	r24, r20
    1a2e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <GPIO_readPin+0x6>
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <GPIO_readPin+0x8>
    1a48:	0f 92       	push	r0
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	8a 83       	std	Y+2, r24	; 0x02
    1a50:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1a52:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	88 30       	cpi	r24, 0x08	; 8
    1a58:	08 f0       	brcs	.+2      	; 0x1a5c <GPIO_readPin+0x1c>
    1a5a:	84 c0       	rjmp	.+264    	; 0x1b64 <GPIO_readPin+0x124>
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	84 30       	cpi	r24, 0x04	; 4
    1a60:	08 f0       	brcs	.+2      	; 0x1a64 <GPIO_readPin+0x24>
    1a62:	80 c0       	rjmp	.+256    	; 0x1b64 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	3d 83       	std	Y+5, r19	; 0x05
    1a6c:	2c 83       	std	Y+4, r18	; 0x04
    1a6e:	4c 81       	ldd	r20, Y+4	; 0x04
    1a70:	5d 81       	ldd	r21, Y+5	; 0x05
    1a72:	41 30       	cpi	r20, 0x01	; 1
    1a74:	51 05       	cpc	r21, r1
    1a76:	79 f1       	breq	.+94     	; 0x1ad6 <GPIO_readPin+0x96>
    1a78:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a7c:	82 30       	cpi	r24, 0x02	; 2
    1a7e:	91 05       	cpc	r25, r1
    1a80:	34 f4       	brge	.+12     	; 0x1a8e <GPIO_readPin+0x4e>
    1a82:	2c 81       	ldd	r18, Y+4	; 0x04
    1a84:	3d 81       	ldd	r19, Y+5	; 0x05
    1a86:	21 15       	cp	r18, r1
    1a88:	31 05       	cpc	r19, r1
    1a8a:	69 f0       	breq	.+26     	; 0x1aa6 <GPIO_readPin+0x66>
    1a8c:	6b c0       	rjmp	.+214    	; 0x1b64 <GPIO_readPin+0x124>
    1a8e:	4c 81       	ldd	r20, Y+4	; 0x04
    1a90:	5d 81       	ldd	r21, Y+5	; 0x05
    1a92:	42 30       	cpi	r20, 0x02	; 2
    1a94:	51 05       	cpc	r21, r1
    1a96:	b9 f1       	breq	.+110    	; 0x1b06 <GPIO_readPin+0xc6>
    1a98:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9c:	83 30       	cpi	r24, 0x03	; 3
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	09 f4       	brne	.+2      	; 0x1aa4 <GPIO_readPin+0x64>
    1aa2:	49 c0       	rjmp	.+146    	; 0x1b36 <GPIO_readPin+0xf6>
    1aa4:	5f c0       	rjmp	.+190    	; 0x1b64 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1aa6:	e9 e3       	ldi	r30, 0x39	; 57
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	88 2f       	mov	r24, r24
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	a9 01       	movw	r20, r18
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <GPIO_readPin+0x7e>
    1aba:	55 95       	asr	r21
    1abc:	47 95       	ror	r20
    1abe:	8a 95       	dec	r24
    1ac0:	e2 f7       	brpl	.-8      	; 0x1aba <GPIO_readPin+0x7a>
    1ac2:	ca 01       	movw	r24, r20
    1ac4:	81 70       	andi	r24, 0x01	; 1
    1ac6:	90 70       	andi	r25, 0x00	; 0
    1ac8:	88 23       	and	r24, r24
    1aca:	19 f0       	breq	.+6      	; 0x1ad2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	89 83       	std	Y+1, r24	; 0x01
    1ad0:	49 c0       	rjmp	.+146    	; 0x1b64 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ad2:	19 82       	std	Y+1, r1	; 0x01
    1ad4:	47 c0       	rjmp	.+142    	; 0x1b64 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1ad6:	e6 e3       	ldi	r30, 0x36	; 54
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	88 2f       	mov	r24, r24
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	a9 01       	movw	r20, r18
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <GPIO_readPin+0xae>
    1aea:	55 95       	asr	r21
    1aec:	47 95       	ror	r20
    1aee:	8a 95       	dec	r24
    1af0:	e2 f7       	brpl	.-8      	; 0x1aea <GPIO_readPin+0xaa>
    1af2:	ca 01       	movw	r24, r20
    1af4:	81 70       	andi	r24, 0x01	; 1
    1af6:	90 70       	andi	r25, 0x00	; 0
    1af8:	88 23       	and	r24, r24
    1afa:	19 f0       	breq	.+6      	; 0x1b02 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	31 c0       	rjmp	.+98     	; 0x1b64 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b02:	19 82       	std	Y+1, r1	; 0x01
    1b04:	2f c0       	rjmp	.+94     	; 0x1b64 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1b06:	e3 e3       	ldi	r30, 0x33	; 51
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	88 2f       	mov	r24, r24
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	a9 01       	movw	r20, r18
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <GPIO_readPin+0xde>
    1b1a:	55 95       	asr	r21
    1b1c:	47 95       	ror	r20
    1b1e:	8a 95       	dec	r24
    1b20:	e2 f7       	brpl	.-8      	; 0x1b1a <GPIO_readPin+0xda>
    1b22:	ca 01       	movw	r24, r20
    1b24:	81 70       	andi	r24, 0x01	; 1
    1b26:	90 70       	andi	r25, 0x00	; 0
    1b28:	88 23       	and	r24, r24
    1b2a:	19 f0       	breq	.+6      	; 0x1b32 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	19 c0       	rjmp	.+50     	; 0x1b64 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b32:	19 82       	std	Y+1, r1	; 0x01
    1b34:	17 c0       	rjmp	.+46     	; 0x1b64 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1b36:	e0 e3       	ldi	r30, 0x30	; 48
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	88 2f       	mov	r24, r24
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	a9 01       	movw	r20, r18
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <GPIO_readPin+0x10e>
    1b4a:	55 95       	asr	r21
    1b4c:	47 95       	ror	r20
    1b4e:	8a 95       	dec	r24
    1b50:	e2 f7       	brpl	.-8      	; 0x1b4a <GPIO_readPin+0x10a>
    1b52:	ca 01       	movw	r24, r20
    1b54:	81 70       	andi	r24, 0x01	; 1
    1b56:	90 70       	andi	r25, 0x00	; 0
    1b58:	88 23       	and	r24, r24
    1b5a:	19 f0       	breq	.+6      	; 0x1b62 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	89 83       	std	Y+1, r24	; 0x01
    1b60:	01 c0       	rjmp	.+2      	; 0x1b64 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b62:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	08 95       	ret

00001b76 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <GPIO_setupPortDirection+0x6>
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <GPIO_setupPortDirection+0x8>
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	89 83       	std	Y+1, r24	; 0x01
    1b84:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	84 30       	cpi	r24, 0x04	; 4
    1b8a:	90 f5       	brcc	.+100    	; 0x1bf0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	3c 83       	std	Y+4, r19	; 0x04
    1b94:	2b 83       	std	Y+3, r18	; 0x03
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9a:	81 30       	cpi	r24, 0x01	; 1
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	d1 f0       	breq	.+52     	; 0x1bd4 <GPIO_setupPortDirection+0x5e>
    1ba0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba4:	22 30       	cpi	r18, 0x02	; 2
    1ba6:	31 05       	cpc	r19, r1
    1ba8:	2c f4       	brge	.+10     	; 0x1bb4 <GPIO_setupPortDirection+0x3e>
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	9c 81       	ldd	r25, Y+4	; 0x04
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	61 f0       	breq	.+24     	; 0x1bca <GPIO_setupPortDirection+0x54>
    1bb2:	1e c0       	rjmp	.+60     	; 0x1bf0 <GPIO_setupPortDirection+0x7a>
    1bb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb8:	22 30       	cpi	r18, 0x02	; 2
    1bba:	31 05       	cpc	r19, r1
    1bbc:	81 f0       	breq	.+32     	; 0x1bde <GPIO_setupPortDirection+0x68>
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc2:	83 30       	cpi	r24, 0x03	; 3
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	81 f0       	breq	.+32     	; 0x1be8 <GPIO_setupPortDirection+0x72>
    1bc8:	13 c0       	rjmp	.+38     	; 0x1bf0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1bca:	ea e3       	ldi	r30, 0x3A	; 58
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	80 83       	st	Z, r24
    1bd2:	0e c0       	rjmp	.+28     	; 0x1bf0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1bd4:	e7 e3       	ldi	r30, 0x37	; 55
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	80 83       	st	Z, r24
    1bdc:	09 c0       	rjmp	.+18     	; 0x1bf0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1bde:	e4 e3       	ldi	r30, 0x34	; 52
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	80 83       	st	Z, r24
    1be6:	04 c0       	rjmp	.+8      	; 0x1bf0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1be8:	e1 e3       	ldi	r30, 0x31	; 49
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <GPIO_writePort+0x6>
    1c04:	00 d0       	rcall	.+0      	; 0x1c06 <GPIO_writePort+0x8>
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    1c0c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	84 30       	cpi	r24, 0x04	; 4
    1c12:	90 f5       	brcc	.+100    	; 0x1c78 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	3c 83       	std	Y+4, r19	; 0x04
    1c1c:	2b 83       	std	Y+3, r18	; 0x03
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	9c 81       	ldd	r25, Y+4	; 0x04
    1c22:	81 30       	cpi	r24, 0x01	; 1
    1c24:	91 05       	cpc	r25, r1
    1c26:	d1 f0       	breq	.+52     	; 0x1c5c <GPIO_writePort+0x5e>
    1c28:	2b 81       	ldd	r18, Y+3	; 0x03
    1c2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c2c:	22 30       	cpi	r18, 0x02	; 2
    1c2e:	31 05       	cpc	r19, r1
    1c30:	2c f4       	brge	.+10     	; 0x1c3c <GPIO_writePort+0x3e>
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	9c 81       	ldd	r25, Y+4	; 0x04
    1c36:	00 97       	sbiw	r24, 0x00	; 0
    1c38:	61 f0       	breq	.+24     	; 0x1c52 <GPIO_writePort+0x54>
    1c3a:	1e c0       	rjmp	.+60     	; 0x1c78 <GPIO_writePort+0x7a>
    1c3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c40:	22 30       	cpi	r18, 0x02	; 2
    1c42:	31 05       	cpc	r19, r1
    1c44:	81 f0       	breq	.+32     	; 0x1c66 <GPIO_writePort+0x68>
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4a:	83 30       	cpi	r24, 0x03	; 3
    1c4c:	91 05       	cpc	r25, r1
    1c4e:	81 f0       	breq	.+32     	; 0x1c70 <GPIO_writePort+0x72>
    1c50:	13 c0       	rjmp	.+38     	; 0x1c78 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1c52:	eb e3       	ldi	r30, 0x3B	; 59
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	80 83       	st	Z, r24
    1c5a:	0e c0       	rjmp	.+28     	; 0x1c78 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1c5c:	e8 e3       	ldi	r30, 0x38	; 56
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	80 83       	st	Z, r24
    1c64:	09 c0       	rjmp	.+18     	; 0x1c78 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1c66:	e5 e3       	ldi	r30, 0x35	; 53
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	80 83       	st	Z, r24
    1c6e:	04 c0       	rjmp	.+8      	; 0x1c78 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1c70:	e2 e3       	ldi	r30, 0x32	; 50
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <GPIO_readPort+0x6>
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <GPIO_readPort+0x8>
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1c94:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	84 30       	cpi	r24, 0x04	; 4
    1c9a:	90 f5       	brcc	.+100    	; 0x1d00 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	28 2f       	mov	r18, r24
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	3c 83       	std	Y+4, r19	; 0x04
    1ca4:	2b 83       	std	Y+3, r18	; 0x03
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    1caa:	81 30       	cpi	r24, 0x01	; 1
    1cac:	91 05       	cpc	r25, r1
    1cae:	d1 f0       	breq	.+52     	; 0x1ce4 <GPIO_readPort+0x5e>
    1cb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb4:	22 30       	cpi	r18, 0x02	; 2
    1cb6:	31 05       	cpc	r19, r1
    1cb8:	2c f4       	brge	.+10     	; 0x1cc4 <GPIO_readPort+0x3e>
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbe:	00 97       	sbiw	r24, 0x00	; 0
    1cc0:	61 f0       	breq	.+24     	; 0x1cda <GPIO_readPort+0x54>
    1cc2:	1e c0       	rjmp	.+60     	; 0x1d00 <GPIO_readPort+0x7a>
    1cc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc8:	22 30       	cpi	r18, 0x02	; 2
    1cca:	31 05       	cpc	r19, r1
    1ccc:	81 f0       	breq	.+32     	; 0x1cee <GPIO_readPort+0x68>
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd2:	83 30       	cpi	r24, 0x03	; 3
    1cd4:	91 05       	cpc	r25, r1
    1cd6:	81 f0       	breq	.+32     	; 0x1cf8 <GPIO_readPort+0x72>
    1cd8:	13 c0       	rjmp	.+38     	; 0x1d00 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1cda:	e9 e3       	ldi	r30, 0x39	; 57
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	89 83       	std	Y+1, r24	; 0x01
    1ce2:	0e c0       	rjmp	.+28     	; 0x1d00 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1ce4:	e6 e3       	ldi	r30, 0x36	; 54
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	09 c0       	rjmp	.+18     	; 0x1d00 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1cee:	e3 e3       	ldi	r30, 0x33	; 51
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	04 c0       	rjmp	.+8      	; 0x1d00 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1cf8:	e0 e3       	ldi	r30, 0x30	; 48
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	08 95       	ret

00001d10 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <KEYPAD_getPressedKey+0x6>
    1d16:	0f 92       	push	r0
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1d1c:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1d1e:	1b 82       	std	Y+3, r1	; 0x03
    1d20:	43 c0       	rjmp	.+134    	; 0x1da8 <KEYPAD_getPressedKey+0x98>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	60 e0       	ldi	r22, 0x00	; 0
    1d26:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	98 2f       	mov	r25, r24
    1d2e:	9c 5f       	subi	r25, 0xFC	; 252
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	69 2f       	mov	r22, r25
    1d34:	41 e0       	ldi	r20, 0x01	; 1
    1d36:	0e 94 4a 0b 	call	0x1694	; 0x1694 <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3c:	88 2f       	mov	r24, r24
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	9c 01       	movw	r18, r24
    1d42:	2c 5f       	subi	r18, 0xFC	; 252
    1d44:	3f 4f       	sbci	r19, 0xFF	; 255
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <KEYPAD_getPressedKey+0x40>
    1d4c:	88 0f       	add	r24, r24
    1d4e:	99 1f       	adc	r25, r25
    1d50:	2a 95       	dec	r18
    1d52:	e2 f7       	brpl	.-8      	; 0x1d4c <KEYPAD_getPressedKey+0x3c>
    1d54:	80 95       	com	r24
    1d56:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	69 81       	ldd	r22, Y+1	; 0x01
    1d5c:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1d60:	1a 82       	std	Y+2, r1	; 0x02
    1d62:	1c c0       	rjmp	.+56     	; 0x1d9c <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	6a 81       	ldd	r22, Y+2	; 0x02
    1d68:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <GPIO_readPin>
    1d6c:	88 23       	and	r24, r24
    1d6e:	99 f4       	brne	.+38     	; 0x1d96 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	88 2f       	mov	r24, r24
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	98 2f       	mov	r25, r24
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	89 0f       	add	r24, r25
    1d84:	8f 5f       	subi	r24, 0xFF	; 255
    1d86:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	8f 5f       	subi	r24, 0xFF	; 255
    1d9a:	8a 83       	std	Y+2, r24	; 0x02
    1d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9e:	84 30       	cpi	r24, 0x04	; 4
    1da0:	08 f3       	brcs	.-62     	; 0x1d64 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	8f 5f       	subi	r24, 0xFF	; 255
    1da6:	8b 83       	std	Y+3, r24	; 0x03
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	84 30       	cpi	r24, 0x04	; 4
    1dac:	08 f4       	brcc	.+2      	; 0x1db0 <KEYPAD_getPressedKey+0xa0>
    1dae:	b9 cf       	rjmp	.-142    	; 0x1d22 <KEYPAD_getPressedKey+0x12>
    1db0:	b6 cf       	rjmp	.-148    	; 0x1d1e <KEYPAD_getPressedKey+0xe>

00001db2 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1db2:	df 93       	push	r29
    1db4:	cf 93       	push	r28
    1db6:	00 d0       	rcall	.+0      	; 0x1db8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1db8:	00 d0       	rcall	.+0      	; 0x1dba <KEYPAD_4x4_adjustKeyNumber+0x8>
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
    1dbe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1dc0:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	3c 83       	std	Y+4, r19	; 0x04
    1dca:	2b 83       	std	Y+3, r18	; 0x03
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd0:	88 30       	cpi	r24, 0x08	; 8
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1dd6:	70 c0       	rjmp	.+224    	; 0x1eb8 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1dd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dda:	3c 81       	ldd	r19, Y+4	; 0x04
    1ddc:	29 30       	cpi	r18, 0x09	; 9
    1dde:	31 05       	cpc	r19, r1
    1de0:	5c f5       	brge	.+86     	; 0x1e38 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	9c 81       	ldd	r25, Y+4	; 0x04
    1de6:	84 30       	cpi	r24, 0x04	; 4
    1de8:	91 05       	cpc	r25, r1
    1dea:	09 f4       	brne	.+2      	; 0x1dee <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1dec:	59 c0       	rjmp	.+178    	; 0x1ea0 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1dee:	2b 81       	ldd	r18, Y+3	; 0x03
    1df0:	3c 81       	ldd	r19, Y+4	; 0x04
    1df2:	25 30       	cpi	r18, 0x05	; 5
    1df4:	31 05       	cpc	r19, r1
    1df6:	9c f4       	brge	.+38     	; 0x1e1e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfc:	82 30       	cpi	r24, 0x02	; 2
    1dfe:	91 05       	cpc	r25, r1
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1e02:	48 c0       	rjmp	.+144    	; 0x1e94 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1e04:	2b 81       	ldd	r18, Y+3	; 0x03
    1e06:	3c 81       	ldd	r19, Y+4	; 0x04
    1e08:	23 30       	cpi	r18, 0x03	; 3
    1e0a:	31 05       	cpc	r19, r1
    1e0c:	0c f0       	brlt	.+2      	; 0x1e10 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1e0e:	45 c0       	rjmp	.+138    	; 0x1e9a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	9c 81       	ldd	r25, Y+4	; 0x04
    1e14:	81 30       	cpi	r24, 0x01	; 1
    1e16:	91 05       	cpc	r25, r1
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1e1a:	39 c0       	rjmp	.+114    	; 0x1e8e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1e1c:	67 c0       	rjmp	.+206    	; 0x1eec <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1e1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e20:	3c 81       	ldd	r19, Y+4	; 0x04
    1e22:	26 30       	cpi	r18, 0x06	; 6
    1e24:	31 05       	cpc	r19, r1
    1e26:	09 f4       	brne	.+2      	; 0x1e2a <KEYPAD_4x4_adjustKeyNumber+0x78>
    1e28:	41 c0       	rjmp	.+130    	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2e:	87 30       	cpi	r24, 0x07	; 7
    1e30:	91 05       	cpc	r25, r1
    1e32:	0c f0       	brlt	.+2      	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1e34:	3e c0       	rjmp	.+124    	; 0x1eb2 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1e36:	37 c0       	rjmp	.+110    	; 0x1ea6 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1e38:	2b 81       	ldd	r18, Y+3	; 0x03
    1e3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e3c:	2c 30       	cpi	r18, 0x0C	; 12
    1e3e:	31 05       	cpc	r19, r1
    1e40:	09 f4       	brne	.+2      	; 0x1e44 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1e42:	46 c0       	rjmp	.+140    	; 0x1ed0 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	9c 81       	ldd	r25, Y+4	; 0x04
    1e48:	8d 30       	cpi	r24, 0x0D	; 13
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	5c f4       	brge	.+22     	; 0x1e64 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1e4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e50:	3c 81       	ldd	r19, Y+4	; 0x04
    1e52:	2a 30       	cpi	r18, 0x0A	; 10
    1e54:	31 05       	cpc	r19, r1
    1e56:	b1 f1       	breq	.+108    	; 0x1ec4 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5c:	8b 30       	cpi	r24, 0x0B	; 11
    1e5e:	91 05       	cpc	r25, r1
    1e60:	a4 f5       	brge	.+104    	; 0x1eca <KEYPAD_4x4_adjustKeyNumber+0x118>
    1e62:	2d c0       	rjmp	.+90     	; 0x1ebe <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1e64:	2b 81       	ldd	r18, Y+3	; 0x03
    1e66:	3c 81       	ldd	r19, Y+4	; 0x04
    1e68:	2e 30       	cpi	r18, 0x0E	; 14
    1e6a:	31 05       	cpc	r19, r1
    1e6c:	b9 f1       	breq	.+110    	; 0x1edc <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	9c 81       	ldd	r25, Y+4	; 0x04
    1e72:	8e 30       	cpi	r24, 0x0E	; 14
    1e74:	91 05       	cpc	r25, r1
    1e76:	7c f1       	brlt	.+94     	; 0x1ed6 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1e78:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e7c:	2f 30       	cpi	r18, 0x0F	; 15
    1e7e:	31 05       	cpc	r19, r1
    1e80:	79 f1       	breq	.+94     	; 0x1ee0 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	9c 81       	ldd	r25, Y+4	; 0x04
    1e86:	80 31       	cpi	r24, 0x10	; 16
    1e88:	91 05       	cpc	r25, r1
    1e8a:	69 f1       	breq	.+90     	; 0x1ee6 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1e8c:	2f c0       	rjmp	.+94     	; 0x1eec <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1e8e:	87 e0       	ldi	r24, 0x07	; 7
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	2e c0       	rjmp	.+92     	; 0x1ef0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1e94:	88 e0       	ldi	r24, 0x08	; 8
    1e96:	89 83       	std	Y+1, r24	; 0x01
    1e98:	2b c0       	rjmp	.+86     	; 0x1ef0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1e9a:	89 e0       	ldi	r24, 0x09	; 9
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    1e9e:	28 c0       	rjmp	.+80     	; 0x1ef0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1ea0:	85 e2       	ldi	r24, 0x25	; 37
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    1ea4:	25 c0       	rjmp	.+74     	; 0x1ef0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1ea6:	84 e0       	ldi	r24, 0x04	; 4
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	22 c0       	rjmp	.+68     	; 0x1ef0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1eac:	85 e0       	ldi	r24, 0x05	; 5
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	1f c0       	rjmp	.+62     	; 0x1ef0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1eb2:	86 e0       	ldi	r24, 0x06	; 6
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	1c c0       	rjmp	.+56     	; 0x1ef0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1eb8:	8a e2       	ldi	r24, 0x2A	; 42
    1eba:	89 83       	std	Y+1, r24	; 0x01
    1ebc:	19 c0       	rjmp	.+50     	; 0x1ef0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	16 c0       	rjmp	.+44     	; 0x1ef0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1ec4:	82 e0       	ldi	r24, 0x02	; 2
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	13 c0       	rjmp	.+38     	; 0x1ef0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1eca:	83 e0       	ldi	r24, 0x03	; 3
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	10 c0       	rjmp	.+32     	; 0x1ef0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1ed0:	8d e2       	ldi	r24, 0x2D	; 45
    1ed2:	89 83       	std	Y+1, r24	; 0x01
    1ed4:	0d c0       	rjmp	.+26     	; 0x1ef0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1ed6:	8d e0       	ldi	r24, 0x0D	; 13
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	0a c0       	rjmp	.+20     	; 0x1ef0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1edc:	19 82       	std	Y+1, r1	; 0x01
    1ede:	08 c0       	rjmp	.+16     	; 0x1ef0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1ee0:	8d e3       	ldi	r24, 0x3D	; 61
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	05 c0       	rjmp	.+10     	; 0x1ef0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1ee6:	8b e2       	ldi	r24, 0x2B	; 43
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1f08:	83 e0       	ldi	r24, 0x03	; 3
    1f0a:	64 e0       	ldi	r22, 0x04	; 4
    1f0c:	41 e0       	ldi	r20, 0x01	; 1
    1f0e:	0e 94 4a 0b 	call	0x1694	; 0x1694 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1f12:	83 e0       	ldi	r24, 0x03	; 3
    1f14:	65 e0       	ldi	r22, 0x05	; 5
    1f16:	41 e0       	ldi	r20, 0x01	; 1
    1f18:	0e 94 4a 0b 	call	0x1694	; 0x1694 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1f1c:	83 e0       	ldi	r24, 0x03	; 3
    1f1e:	66 e0       	ldi	r22, 0x06	; 6
    1f20:	41 e0       	ldi	r20, 0x01	; 1
    1f22:	0e 94 4a 0b 	call	0x1694	; 0x1694 <GPIO_setupPinDirection>

#if (LCD_DATA_BITS_MODE == 4)

	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID,PIN_OUTPUT);
    1f26:	82 e0       	ldi	r24, 0x02	; 2
    1f28:	64 e0       	ldi	r22, 0x04	; 4
    1f2a:	41 e0       	ldi	r20, 0x01	; 1
    1f2c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+1,PIN_OUTPUT);
    1f30:	82 e0       	ldi	r24, 0x02	; 2
    1f32:	65 e0       	ldi	r22, 0x05	; 5
    1f34:	41 e0       	ldi	r20, 0x01	; 1
    1f36:	0e 94 4a 0b 	call	0x1694	; 0x1694 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+2,PIN_OUTPUT);
    1f3a:	82 e0       	ldi	r24, 0x02	; 2
    1f3c:	66 e0       	ldi	r22, 0x06	; 6
    1f3e:	41 e0       	ldi	r20, 0x01	; 1
    1f40:	0e 94 4a 0b 	call	0x1694	; 0x1694 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+3,PIN_OUTPUT);
    1f44:	82 e0       	ldi	r24, 0x02	; 2
    1f46:	67 e0       	ldi	r22, 0x07	; 7
    1f48:	41 e0       	ldi	r20, 0x01	; 1
    1f4a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_GO_TO_HOME);
    1f4e:	82 e0       	ldi	r24, 0x02	; 2
    1f50:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    1f54:	88 e2       	ldi	r24, 0x28	; 40
    1f56:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_sendCommand>
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1f5a:	8c e0       	ldi	r24, 0x0C	; 12
    1f5c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_sendCommand>
}
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1f6c:	0f 93       	push	r16
    1f6e:	1f 93       	push	r17
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	c4 56       	subi	r28, 0x64	; 100
    1f7a:	d0 40       	sbci	r29, 0x00	; 0
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	de bf       	out	0x3e, r29	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	fe 01       	movw	r30, r28
    1f88:	ec 59       	subi	r30, 0x9C	; 156
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	80 83       	st	Z, r24
	uint8 lcd_port_value = 0;
    1f8e:	fe 01       	movw	r30, r28
    1f90:	ed 59       	subi	r30, 0x9D	; 157
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	10 82       	st	Z, r1
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1f96:	83 e0       	ldi	r24, 0x03	; 3
    1f98:	64 e0       	ldi	r22, 0x04	; 4
    1f9a:	40 e0       	ldi	r20, 0x00	; 0
    1f9c:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1fa0:	83 e0       	ldi	r24, 0x03	; 3
    1fa2:	65 e0       	ldi	r22, 0x05	; 5
    1fa4:	40 e0       	ldi	r20, 0x00	; 0
    1fa6:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_writePin>
    1faa:	fe 01       	movw	r30, r28
    1fac:	e1 5a       	subi	r30, 0xA1	; 161
    1fae:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	a0 e8       	ldi	r26, 0x80	; 128
    1fb6:	bf e3       	ldi	r27, 0x3F	; 63
    1fb8:	80 83       	st	Z, r24
    1fba:	91 83       	std	Z+1, r25	; 0x01
    1fbc:	a2 83       	std	Z+2, r26	; 0x02
    1fbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc0:	8e 01       	movw	r16, r28
    1fc2:	05 5a       	subi	r16, 0xA5	; 165
    1fc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	e1 5a       	subi	r30, 0xA1	; 161
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	60 81       	ld	r22, Z
    1fce:	71 81       	ldd	r23, Z+1	; 0x01
    1fd0:	82 81       	ldd	r24, Z+2	; 0x02
    1fd2:	93 81       	ldd	r25, Z+3	; 0x03
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	4a e7       	ldi	r20, 0x7A	; 122
    1fda:	53 e4       	ldi	r21, 0x43	; 67
    1fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	f8 01       	movw	r30, r16
    1fe6:	80 83       	st	Z, r24
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	a2 83       	std	Z+2, r26	; 0x02
    1fec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e5 5a       	subi	r30, 0xA5	; 165
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	60 81       	ld	r22, Z
    1ff6:	71 81       	ldd	r23, Z+1	; 0x01
    1ff8:	82 81       	ldd	r24, Z+2	; 0x02
    1ffa:	93 81       	ldd	r25, Z+3	; 0x03
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e8       	ldi	r20, 0x80	; 128
    2002:	5f e3       	ldi	r21, 0x3F	; 63
    2004:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2008:	88 23       	and	r24, r24
    200a:	44 f4       	brge	.+16     	; 0x201c <LCD_sendCommand+0xb0>
		__ticks = 1;
    200c:	fe 01       	movw	r30, r28
    200e:	e7 5a       	subi	r30, 0xA7	; 167
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	91 83       	std	Z+1, r25	; 0x01
    2018:	80 83       	st	Z, r24
    201a:	64 c0       	rjmp	.+200    	; 0x20e4 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    201c:	fe 01       	movw	r30, r28
    201e:	e5 5a       	subi	r30, 0xA5	; 165
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	60 81       	ld	r22, Z
    2024:	71 81       	ldd	r23, Z+1	; 0x01
    2026:	82 81       	ldd	r24, Z+2	; 0x02
    2028:	93 81       	ldd	r25, Z+3	; 0x03
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	3f ef       	ldi	r19, 0xFF	; 255
    202e:	4f e7       	ldi	r20, 0x7F	; 127
    2030:	57 e4       	ldi	r21, 0x47	; 71
    2032:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2036:	18 16       	cp	r1, r24
    2038:	0c f0       	brlt	.+2      	; 0x203c <LCD_sendCommand+0xd0>
    203a:	43 c0       	rjmp	.+134    	; 0x20c2 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203c:	fe 01       	movw	r30, r28
    203e:	e1 5a       	subi	r30, 0xA1	; 161
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	60 81       	ld	r22, Z
    2044:	71 81       	ldd	r23, Z+1	; 0x01
    2046:	82 81       	ldd	r24, Z+2	; 0x02
    2048:	93 81       	ldd	r25, Z+3	; 0x03
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e2       	ldi	r20, 0x20	; 32
    2050:	51 e4       	ldi	r21, 0x41	; 65
    2052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	8e 01       	movw	r16, r28
    205c:	07 5a       	subi	r16, 0xA7	; 167
    205e:	1f 4f       	sbci	r17, 0xFF	; 255
    2060:	bc 01       	movw	r22, r24
    2062:	cd 01       	movw	r24, r26
    2064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	f8 01       	movw	r30, r16
    206e:	91 83       	std	Z+1, r25	; 0x01
    2070:	80 83       	st	Z, r24
    2072:	1f c0       	rjmp	.+62     	; 0x20b2 <LCD_sendCommand+0x146>
    2074:	fe 01       	movw	r30, r28
    2076:	e9 5a       	subi	r30, 0xA9	; 169
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	89 e1       	ldi	r24, 0x19	; 25
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	91 83       	std	Z+1, r25	; 0x01
    2080:	80 83       	st	Z, r24
    2082:	fe 01       	movw	r30, r28
    2084:	e9 5a       	subi	r30, 0xA9	; 169
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	80 81       	ld	r24, Z
    208a:	91 81       	ldd	r25, Z+1	; 0x01
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <LCD_sendCommand+0x120>
    2090:	fe 01       	movw	r30, r28
    2092:	e9 5a       	subi	r30, 0xA9	; 169
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	91 83       	std	Z+1, r25	; 0x01
    2098:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    209a:	de 01       	movw	r26, r28
    209c:	a7 5a       	subi	r26, 0xA7	; 167
    209e:	bf 4f       	sbci	r27, 0xFF	; 255
    20a0:	fe 01       	movw	r30, r28
    20a2:	e7 5a       	subi	r30, 0xA7	; 167
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	80 81       	ld	r24, Z
    20a8:	91 81       	ldd	r25, Z+1	; 0x01
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	11 96       	adiw	r26, 0x01	; 1
    20ae:	9c 93       	st	X, r25
    20b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b2:	fe 01       	movw	r30, r28
    20b4:	e7 5a       	subi	r30, 0xA7	; 167
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	80 81       	ld	r24, Z
    20ba:	91 81       	ldd	r25, Z+1	; 0x01
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	d1 f6       	brne	.-76     	; 0x2074 <LCD_sendCommand+0x108>
    20c0:	27 c0       	rjmp	.+78     	; 0x2110 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c2:	8e 01       	movw	r16, r28
    20c4:	07 5a       	subi	r16, 0xA7	; 167
    20c6:	1f 4f       	sbci	r17, 0xFF	; 255
    20c8:	fe 01       	movw	r30, r28
    20ca:	e5 5a       	subi	r30, 0xA5	; 165
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	60 81       	ld	r22, Z
    20d0:	71 81       	ldd	r23, Z+1	; 0x01
    20d2:	82 81       	ldd	r24, Z+2	; 0x02
    20d4:	93 81       	ldd	r25, Z+3	; 0x03
    20d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	f8 01       	movw	r30, r16
    20e0:	91 83       	std	Z+1, r25	; 0x01
    20e2:	80 83       	st	Z, r24
    20e4:	de 01       	movw	r26, r28
    20e6:	ab 5a       	subi	r26, 0xAB	; 171
    20e8:	bf 4f       	sbci	r27, 0xFF	; 255
    20ea:	fe 01       	movw	r30, r28
    20ec:	e7 5a       	subi	r30, 0xA7	; 167
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	80 81       	ld	r24, Z
    20f2:	91 81       	ldd	r25, Z+1	; 0x01
    20f4:	8d 93       	st	X+, r24
    20f6:	9c 93       	st	X, r25
    20f8:	fe 01       	movw	r30, r28
    20fa:	eb 5a       	subi	r30, 0xAB	; 171
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	80 81       	ld	r24, Z
    2100:	91 81       	ldd	r25, Z+1	; 0x01
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	f1 f7       	brne	.-4      	; 0x2102 <LCD_sendCommand+0x196>
    2106:	fe 01       	movw	r30, r28
    2108:	eb 5a       	subi	r30, 0xAB	; 171
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2110:	83 e0       	ldi	r24, 0x03	; 3
    2112:	66 e0       	ldi	r22, 0x06	; 6
    2114:	41 e0       	ldi	r20, 0x01	; 1
    2116:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_writePin>
    211a:	fe 01       	movw	r30, r28
    211c:	ef 5a       	subi	r30, 0xAF	; 175
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	a0 e8       	ldi	r26, 0x80	; 128
    2126:	bf e3       	ldi	r27, 0x3F	; 63
    2128:	80 83       	st	Z, r24
    212a:	91 83       	std	Z+1, r25	; 0x01
    212c:	a2 83       	std	Z+2, r26	; 0x02
    212e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2130:	8e 01       	movw	r16, r28
    2132:	03 5b       	subi	r16, 0xB3	; 179
    2134:	1f 4f       	sbci	r17, 0xFF	; 255
    2136:	fe 01       	movw	r30, r28
    2138:	ef 5a       	subi	r30, 0xAF	; 175
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	60 81       	ld	r22, Z
    213e:	71 81       	ldd	r23, Z+1	; 0x01
    2140:	82 81       	ldd	r24, Z+2	; 0x02
    2142:	93 81       	ldd	r25, Z+3	; 0x03
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	4a e7       	ldi	r20, 0x7A	; 122
    214a:	53 e4       	ldi	r21, 0x43	; 67
    214c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	f8 01       	movw	r30, r16
    2156:	80 83       	st	Z, r24
    2158:	91 83       	std	Z+1, r25	; 0x01
    215a:	a2 83       	std	Z+2, r26	; 0x02
    215c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    215e:	fe 01       	movw	r30, r28
    2160:	e3 5b       	subi	r30, 0xB3	; 179
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	60 81       	ld	r22, Z
    2166:	71 81       	ldd	r23, Z+1	; 0x01
    2168:	82 81       	ldd	r24, Z+2	; 0x02
    216a:	93 81       	ldd	r25, Z+3	; 0x03
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e8       	ldi	r20, 0x80	; 128
    2172:	5f e3       	ldi	r21, 0x3F	; 63
    2174:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2178:	88 23       	and	r24, r24
    217a:	44 f4       	brge	.+16     	; 0x218c <LCD_sendCommand+0x220>
		__ticks = 1;
    217c:	fe 01       	movw	r30, r28
    217e:	e5 5b       	subi	r30, 0xB5	; 181
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	91 83       	std	Z+1, r25	; 0x01
    2188:	80 83       	st	Z, r24
    218a:	64 c0       	rjmp	.+200    	; 0x2254 <LCD_sendCommand+0x2e8>
	else if (__tmp > 65535)
    218c:	fe 01       	movw	r30, r28
    218e:	e3 5b       	subi	r30, 0xB3	; 179
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	60 81       	ld	r22, Z
    2194:	71 81       	ldd	r23, Z+1	; 0x01
    2196:	82 81       	ldd	r24, Z+2	; 0x02
    2198:	93 81       	ldd	r25, Z+3	; 0x03
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	3f ef       	ldi	r19, 0xFF	; 255
    219e:	4f e7       	ldi	r20, 0x7F	; 127
    21a0:	57 e4       	ldi	r21, 0x47	; 71
    21a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21a6:	18 16       	cp	r1, r24
    21a8:	0c f0       	brlt	.+2      	; 0x21ac <LCD_sendCommand+0x240>
    21aa:	43 c0       	rjmp	.+134    	; 0x2232 <LCD_sendCommand+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ac:	fe 01       	movw	r30, r28
    21ae:	ef 5a       	subi	r30, 0xAF	; 175
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	60 81       	ld	r22, Z
    21b4:	71 81       	ldd	r23, Z+1	; 0x01
    21b6:	82 81       	ldd	r24, Z+2	; 0x02
    21b8:	93 81       	ldd	r25, Z+3	; 0x03
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e2       	ldi	r20, 0x20	; 32
    21c0:	51 e4       	ldi	r21, 0x41	; 65
    21c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	8e 01       	movw	r16, r28
    21cc:	05 5b       	subi	r16, 0xB5	; 181
    21ce:	1f 4f       	sbci	r17, 0xFF	; 255
    21d0:	bc 01       	movw	r22, r24
    21d2:	cd 01       	movw	r24, r26
    21d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	f8 01       	movw	r30, r16
    21de:	91 83       	std	Z+1, r25	; 0x01
    21e0:	80 83       	st	Z, r24
    21e2:	1f c0       	rjmp	.+62     	; 0x2222 <LCD_sendCommand+0x2b6>
    21e4:	fe 01       	movw	r30, r28
    21e6:	e7 5b       	subi	r30, 0xB7	; 183
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	89 e1       	ldi	r24, 0x19	; 25
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	91 83       	std	Z+1, r25	; 0x01
    21f0:	80 83       	st	Z, r24
    21f2:	fe 01       	movw	r30, r28
    21f4:	e7 5b       	subi	r30, 0xB7	; 183
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	f1 f7       	brne	.-4      	; 0x21fc <LCD_sendCommand+0x290>
    2200:	fe 01       	movw	r30, r28
    2202:	e7 5b       	subi	r30, 0xB7	; 183
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	91 83       	std	Z+1, r25	; 0x01
    2208:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220a:	de 01       	movw	r26, r28
    220c:	a5 5b       	subi	r26, 0xB5	; 181
    220e:	bf 4f       	sbci	r27, 0xFF	; 255
    2210:	fe 01       	movw	r30, r28
    2212:	e5 5b       	subi	r30, 0xB5	; 181
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	80 81       	ld	r24, Z
    2218:	91 81       	ldd	r25, Z+1	; 0x01
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	11 96       	adiw	r26, 0x01	; 1
    221e:	9c 93       	st	X, r25
    2220:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2222:	fe 01       	movw	r30, r28
    2224:	e5 5b       	subi	r30, 0xB5	; 181
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	80 81       	ld	r24, Z
    222a:	91 81       	ldd	r25, Z+1	; 0x01
    222c:	00 97       	sbiw	r24, 0x00	; 0
    222e:	d1 f6       	brne	.-76     	; 0x21e4 <LCD_sendCommand+0x278>
    2230:	27 c0       	rjmp	.+78     	; 0x2280 <LCD_sendCommand+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2232:	8e 01       	movw	r16, r28
    2234:	05 5b       	subi	r16, 0xB5	; 181
    2236:	1f 4f       	sbci	r17, 0xFF	; 255
    2238:	fe 01       	movw	r30, r28
    223a:	e3 5b       	subi	r30, 0xB3	; 179
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	60 81       	ld	r22, Z
    2240:	71 81       	ldd	r23, Z+1	; 0x01
    2242:	82 81       	ldd	r24, Z+2	; 0x02
    2244:	93 81       	ldd	r25, Z+3	; 0x03
    2246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	f8 01       	movw	r30, r16
    2250:	91 83       	std	Z+1, r25	; 0x01
    2252:	80 83       	st	Z, r24
    2254:	de 01       	movw	r26, r28
    2256:	a9 5b       	subi	r26, 0xB9	; 185
    2258:	bf 4f       	sbci	r27, 0xFF	; 255
    225a:	fe 01       	movw	r30, r28
    225c:	e5 5b       	subi	r30, 0xB5	; 181
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	80 81       	ld	r24, Z
    2262:	91 81       	ldd	r25, Z+1	; 0x01
    2264:	8d 93       	st	X+, r24
    2266:	9c 93       	st	X, r25
    2268:	fe 01       	movw	r30, r28
    226a:	e9 5b       	subi	r30, 0xB9	; 185
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	80 81       	ld	r24, Z
    2270:	91 81       	ldd	r25, Z+1	; 0x01
    2272:	01 97       	sbiw	r24, 0x01	; 1
    2274:	f1 f7       	brne	.-4      	; 0x2272 <LCD_sendCommand+0x306>
    2276:	fe 01       	movw	r30, r28
    2278:	e9 5b       	subi	r30, 0xB9	; 185
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	91 83       	std	Z+1, r25	; 0x01
    227e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required command to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    2280:	82 e0       	ldi	r24, 0x02	; 2
    2282:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <GPIO_readPort>
    2286:	fe 01       	movw	r30, r28
    2288:	ed 59       	subi	r30, 0x9D	; 157
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (command & 0xF0);
    228e:	fe 01       	movw	r30, r28
    2290:	ed 59       	subi	r30, 0x9D	; 157
    2292:	ff 4f       	sbci	r31, 0xFF	; 255
    2294:	80 81       	ld	r24, Z
    2296:	98 2f       	mov	r25, r24
    2298:	9f 70       	andi	r25, 0x0F	; 15
    229a:	fe 01       	movw	r30, r28
    229c:	ec 59       	subi	r30, 0x9C	; 156
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	80 81       	ld	r24, Z
    22a2:	80 7f       	andi	r24, 0xF0	; 240
    22a4:	89 2b       	or	r24, r25
    22a6:	fe 01       	movw	r30, r28
    22a8:	ed 59       	subi	r30, 0x9D	; 157
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	80 83       	st	Z, r24
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((command & 0xF0) >> 4);
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    22ae:	fe 01       	movw	r30, r28
    22b0:	ed 59       	subi	r30, 0x9D	; 157
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	82 e0       	ldi	r24, 0x02	; 2
    22b6:	60 81       	ld	r22, Z
    22b8:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <GPIO_writePort>
    22bc:	fe 01       	movw	r30, r28
    22be:	ed 5b       	subi	r30, 0xBD	; 189
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	a0 e8       	ldi	r26, 0x80	; 128
    22c8:	bf e3       	ldi	r27, 0x3F	; 63
    22ca:	80 83       	st	Z, r24
    22cc:	91 83       	std	Z+1, r25	; 0x01
    22ce:	a2 83       	std	Z+2, r26	; 0x02
    22d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d2:	8e 01       	movw	r16, r28
    22d4:	01 5c       	subi	r16, 0xC1	; 193
    22d6:	1f 4f       	sbci	r17, 0xFF	; 255
    22d8:	fe 01       	movw	r30, r28
    22da:	ed 5b       	subi	r30, 0xBD	; 189
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	60 81       	ld	r22, Z
    22e0:	71 81       	ldd	r23, Z+1	; 0x01
    22e2:	82 81       	ldd	r24, Z+2	; 0x02
    22e4:	93 81       	ldd	r25, Z+3	; 0x03
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	4a e7       	ldi	r20, 0x7A	; 122
    22ec:	53 e4       	ldi	r21, 0x43	; 67
    22ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	f8 01       	movw	r30, r16
    22f8:	80 83       	st	Z, r24
    22fa:	91 83       	std	Z+1, r25	; 0x01
    22fc:	a2 83       	std	Z+2, r26	; 0x02
    22fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2300:	fe 01       	movw	r30, r28
    2302:	ff 96       	adiw	r30, 0x3f	; 63
    2304:	60 81       	ld	r22, Z
    2306:	71 81       	ldd	r23, Z+1	; 0x01
    2308:	82 81       	ldd	r24, Z+2	; 0x02
    230a:	93 81       	ldd	r25, Z+3	; 0x03
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	40 e8       	ldi	r20, 0x80	; 128
    2312:	5f e3       	ldi	r21, 0x3F	; 63
    2314:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2318:	88 23       	and	r24, r24
    231a:	2c f4       	brge	.+10     	; 0x2326 <LCD_sendCommand+0x3ba>
		__ticks = 1;
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	9e af       	std	Y+62, r25	; 0x3e
    2322:	8d af       	std	Y+61, r24	; 0x3d
    2324:	46 c0       	rjmp	.+140    	; 0x23b2 <LCD_sendCommand+0x446>
	else if (__tmp > 65535)
    2326:	fe 01       	movw	r30, r28
    2328:	ff 96       	adiw	r30, 0x3f	; 63
    232a:	60 81       	ld	r22, Z
    232c:	71 81       	ldd	r23, Z+1	; 0x01
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	3f ef       	ldi	r19, 0xFF	; 255
    2336:	4f e7       	ldi	r20, 0x7F	; 127
    2338:	57 e4       	ldi	r21, 0x47	; 71
    233a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    233e:	18 16       	cp	r1, r24
    2340:	64 f5       	brge	.+88     	; 0x239a <LCD_sendCommand+0x42e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2342:	fe 01       	movw	r30, r28
    2344:	ed 5b       	subi	r30, 0xBD	; 189
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	60 81       	ld	r22, Z
    234a:	71 81       	ldd	r23, Z+1	; 0x01
    234c:	82 81       	ldd	r24, Z+2	; 0x02
    234e:	93 81       	ldd	r25, Z+3	; 0x03
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e2       	ldi	r20, 0x20	; 32
    2356:	51 e4       	ldi	r21, 0x41	; 65
    2358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	bc 01       	movw	r22, r24
    2362:	cd 01       	movw	r24, r26
    2364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	9e af       	std	Y+62, r25	; 0x3e
    236e:	8d af       	std	Y+61, r24	; 0x3d
    2370:	0f c0       	rjmp	.+30     	; 0x2390 <LCD_sendCommand+0x424>
    2372:	89 e1       	ldi	r24, 0x19	; 25
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	9c af       	std	Y+60, r25	; 0x3c
    2378:	8b af       	std	Y+59, r24	; 0x3b
    237a:	8b ad       	ldd	r24, Y+59	; 0x3b
    237c:	9c ad       	ldd	r25, Y+60	; 0x3c
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	f1 f7       	brne	.-4      	; 0x237e <LCD_sendCommand+0x412>
    2382:	9c af       	std	Y+60, r25	; 0x3c
    2384:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2386:	8d ad       	ldd	r24, Y+61	; 0x3d
    2388:	9e ad       	ldd	r25, Y+62	; 0x3e
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	9e af       	std	Y+62, r25	; 0x3e
    238e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2390:	8d ad       	ldd	r24, Y+61	; 0x3d
    2392:	9e ad       	ldd	r25, Y+62	; 0x3e
    2394:	00 97       	sbiw	r24, 0x00	; 0
    2396:	69 f7       	brne	.-38     	; 0x2372 <LCD_sendCommand+0x406>
    2398:	16 c0       	rjmp	.+44     	; 0x23c6 <LCD_sendCommand+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239a:	fe 01       	movw	r30, r28
    239c:	ff 96       	adiw	r30, 0x3f	; 63
    239e:	60 81       	ld	r22, Z
    23a0:	71 81       	ldd	r23, Z+1	; 0x01
    23a2:	82 81       	ldd	r24, Z+2	; 0x02
    23a4:	93 81       	ldd	r25, Z+3	; 0x03
    23a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	9e af       	std	Y+62, r25	; 0x3e
    23b0:	8d af       	std	Y+61, r24	; 0x3d
    23b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    23b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    23b6:	9a af       	std	Y+58, r25	; 0x3a
    23b8:	89 af       	std	Y+57, r24	; 0x39
    23ba:	89 ad       	ldd	r24, Y+57	; 0x39
    23bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <LCD_sendCommand+0x452>
    23c2:	9a af       	std	Y+58, r25	; 0x3a
    23c4:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    23c6:	83 e0       	ldi	r24, 0x03	; 3
    23c8:	66 e0       	ldi	r22, 0x06	; 6
    23ca:	40 e0       	ldi	r20, 0x00	; 0
    23cc:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_writePin>
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	a0 e8       	ldi	r26, 0x80	; 128
    23d6:	bf e3       	ldi	r27, 0x3F	; 63
    23d8:	8d ab       	std	Y+53, r24	; 0x35
    23da:	9e ab       	std	Y+54, r25	; 0x36
    23dc:	af ab       	std	Y+55, r26	; 0x37
    23de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e0:	6d a9       	ldd	r22, Y+53	; 0x35
    23e2:	7e a9       	ldd	r23, Y+54	; 0x36
    23e4:	8f a9       	ldd	r24, Y+55	; 0x37
    23e6:	98 ad       	ldd	r25, Y+56	; 0x38
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	4a e7       	ldi	r20, 0x7A	; 122
    23ee:	53 e4       	ldi	r21, 0x43	; 67
    23f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	89 ab       	std	Y+49, r24	; 0x31
    23fa:	9a ab       	std	Y+50, r25	; 0x32
    23fc:	ab ab       	std	Y+51, r26	; 0x33
    23fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2400:	69 a9       	ldd	r22, Y+49	; 0x31
    2402:	7a a9       	ldd	r23, Y+50	; 0x32
    2404:	8b a9       	ldd	r24, Y+51	; 0x33
    2406:	9c a9       	ldd	r25, Y+52	; 0x34
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 e8       	ldi	r20, 0x80	; 128
    240e:	5f e3       	ldi	r21, 0x3F	; 63
    2410:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2414:	88 23       	and	r24, r24
    2416:	2c f4       	brge	.+10     	; 0x2422 <LCD_sendCommand+0x4b6>
		__ticks = 1;
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	98 ab       	std	Y+48, r25	; 0x30
    241e:	8f a7       	std	Y+47, r24	; 0x2f
    2420:	3f c0       	rjmp	.+126    	; 0x24a0 <LCD_sendCommand+0x534>
	else if (__tmp > 65535)
    2422:	69 a9       	ldd	r22, Y+49	; 0x31
    2424:	7a a9       	ldd	r23, Y+50	; 0x32
    2426:	8b a9       	ldd	r24, Y+51	; 0x33
    2428:	9c a9       	ldd	r25, Y+52	; 0x34
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	3f ef       	ldi	r19, 0xFF	; 255
    242e:	4f e7       	ldi	r20, 0x7F	; 127
    2430:	57 e4       	ldi	r21, 0x47	; 71
    2432:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2436:	18 16       	cp	r1, r24
    2438:	4c f5       	brge	.+82     	; 0x248c <LCD_sendCommand+0x520>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243a:	6d a9       	ldd	r22, Y+53	; 0x35
    243c:	7e a9       	ldd	r23, Y+54	; 0x36
    243e:	8f a9       	ldd	r24, Y+55	; 0x37
    2440:	98 ad       	ldd	r25, Y+56	; 0x38
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e2       	ldi	r20, 0x20	; 32
    2448:	51 e4       	ldi	r21, 0x41	; 65
    244a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	bc 01       	movw	r22, r24
    2454:	cd 01       	movw	r24, r26
    2456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	98 ab       	std	Y+48, r25	; 0x30
    2460:	8f a7       	std	Y+47, r24	; 0x2f
    2462:	0f c0       	rjmp	.+30     	; 0x2482 <LCD_sendCommand+0x516>
    2464:	89 e1       	ldi	r24, 0x19	; 25
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	9e a7       	std	Y+46, r25	; 0x2e
    246a:	8d a7       	std	Y+45, r24	; 0x2d
    246c:	8d a5       	ldd	r24, Y+45	; 0x2d
    246e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	f1 f7       	brne	.-4      	; 0x2470 <LCD_sendCommand+0x504>
    2474:	9e a7       	std	Y+46, r25	; 0x2e
    2476:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2478:	8f a5       	ldd	r24, Y+47	; 0x2f
    247a:	98 a9       	ldd	r25, Y+48	; 0x30
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	98 ab       	std	Y+48, r25	; 0x30
    2480:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2482:	8f a5       	ldd	r24, Y+47	; 0x2f
    2484:	98 a9       	ldd	r25, Y+48	; 0x30
    2486:	00 97       	sbiw	r24, 0x00	; 0
    2488:	69 f7       	brne	.-38     	; 0x2464 <LCD_sendCommand+0x4f8>
    248a:	14 c0       	rjmp	.+40     	; 0x24b4 <LCD_sendCommand+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248c:	69 a9       	ldd	r22, Y+49	; 0x31
    248e:	7a a9       	ldd	r23, Y+50	; 0x32
    2490:	8b a9       	ldd	r24, Y+51	; 0x33
    2492:	9c a9       	ldd	r25, Y+52	; 0x34
    2494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	98 ab       	std	Y+48, r25	; 0x30
    249e:	8f a7       	std	Y+47, r24	; 0x2f
    24a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24a2:	98 a9       	ldd	r25, Y+48	; 0x30
    24a4:	9c a7       	std	Y+44, r25	; 0x2c
    24a6:	8b a7       	std	Y+43, r24	; 0x2b
    24a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    24aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	f1 f7       	brne	.-4      	; 0x24ac <LCD_sendCommand+0x540>
    24b0:	9c a7       	std	Y+44, r25	; 0x2c
    24b2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    24b4:	83 e0       	ldi	r24, 0x03	; 3
    24b6:	66 e0       	ldi	r22, 0x06	; 6
    24b8:	41 e0       	ldi	r20, 0x01	; 1
    24ba:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_writePin>
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	a0 e8       	ldi	r26, 0x80	; 128
    24c4:	bf e3       	ldi	r27, 0x3F	; 63
    24c6:	8f a3       	std	Y+39, r24	; 0x27
    24c8:	98 a7       	std	Y+40, r25	; 0x28
    24ca:	a9 a7       	std	Y+41, r26	; 0x29
    24cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ce:	6f a1       	ldd	r22, Y+39	; 0x27
    24d0:	78 a5       	ldd	r23, Y+40	; 0x28
    24d2:	89 a5       	ldd	r24, Y+41	; 0x29
    24d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	4a e7       	ldi	r20, 0x7A	; 122
    24dc:	53 e4       	ldi	r21, 0x43	; 67
    24de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	8b a3       	std	Y+35, r24	; 0x23
    24e8:	9c a3       	std	Y+36, r25	; 0x24
    24ea:	ad a3       	std	Y+37, r26	; 0x25
    24ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24ee:	6b a1       	ldd	r22, Y+35	; 0x23
    24f0:	7c a1       	ldd	r23, Y+36	; 0x24
    24f2:	8d a1       	ldd	r24, Y+37	; 0x25
    24f4:	9e a1       	ldd	r25, Y+38	; 0x26
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e8       	ldi	r20, 0x80	; 128
    24fc:	5f e3       	ldi	r21, 0x3F	; 63
    24fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2502:	88 23       	and	r24, r24
    2504:	2c f4       	brge	.+10     	; 0x2510 <LCD_sendCommand+0x5a4>
		__ticks = 1;
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	9a a3       	std	Y+34, r25	; 0x22
    250c:	89 a3       	std	Y+33, r24	; 0x21
    250e:	3f c0       	rjmp	.+126    	; 0x258e <LCD_sendCommand+0x622>
	else if (__tmp > 65535)
    2510:	6b a1       	ldd	r22, Y+35	; 0x23
    2512:	7c a1       	ldd	r23, Y+36	; 0x24
    2514:	8d a1       	ldd	r24, Y+37	; 0x25
    2516:	9e a1       	ldd	r25, Y+38	; 0x26
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	3f ef       	ldi	r19, 0xFF	; 255
    251c:	4f e7       	ldi	r20, 0x7F	; 127
    251e:	57 e4       	ldi	r21, 0x47	; 71
    2520:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2524:	18 16       	cp	r1, r24
    2526:	4c f5       	brge	.+82     	; 0x257a <LCD_sendCommand+0x60e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2528:	6f a1       	ldd	r22, Y+39	; 0x27
    252a:	78 a5       	ldd	r23, Y+40	; 0x28
    252c:	89 a5       	ldd	r24, Y+41	; 0x29
    252e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e2       	ldi	r20, 0x20	; 32
    2536:	51 e4       	ldi	r21, 0x41	; 65
    2538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	bc 01       	movw	r22, r24
    2542:	cd 01       	movw	r24, r26
    2544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	9a a3       	std	Y+34, r25	; 0x22
    254e:	89 a3       	std	Y+33, r24	; 0x21
    2550:	0f c0       	rjmp	.+30     	; 0x2570 <LCD_sendCommand+0x604>
    2552:	89 e1       	ldi	r24, 0x19	; 25
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	98 a3       	std	Y+32, r25	; 0x20
    2558:	8f 8f       	std	Y+31, r24	; 0x1f
    255a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    255c:	98 a1       	ldd	r25, Y+32	; 0x20
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	f1 f7       	brne	.-4      	; 0x255e <LCD_sendCommand+0x5f2>
    2562:	98 a3       	std	Y+32, r25	; 0x20
    2564:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2566:	89 a1       	ldd	r24, Y+33	; 0x21
    2568:	9a a1       	ldd	r25, Y+34	; 0x22
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	9a a3       	std	Y+34, r25	; 0x22
    256e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2570:	89 a1       	ldd	r24, Y+33	; 0x21
    2572:	9a a1       	ldd	r25, Y+34	; 0x22
    2574:	00 97       	sbiw	r24, 0x00	; 0
    2576:	69 f7       	brne	.-38     	; 0x2552 <LCD_sendCommand+0x5e6>
    2578:	14 c0       	rjmp	.+40     	; 0x25a2 <LCD_sendCommand+0x636>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257a:	6b a1       	ldd	r22, Y+35	; 0x23
    257c:	7c a1       	ldd	r23, Y+36	; 0x24
    257e:	8d a1       	ldd	r24, Y+37	; 0x25
    2580:	9e a1       	ldd	r25, Y+38	; 0x26
    2582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	9a a3       	std	Y+34, r25	; 0x22
    258c:	89 a3       	std	Y+33, r24	; 0x21
    258e:	89 a1       	ldd	r24, Y+33	; 0x21
    2590:	9a a1       	ldd	r25, Y+34	; 0x22
    2592:	9e 8f       	std	Y+30, r25	; 0x1e
    2594:	8d 8f       	std	Y+29, r24	; 0x1d
    2596:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2598:	9e 8d       	ldd	r25, Y+30	; 0x1e
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	f1 f7       	brne	.-4      	; 0x259a <LCD_sendCommand+0x62e>
    259e:	9e 8f       	std	Y+30, r25	; 0x1e
    25a0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required command to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    25a2:	82 e0       	ldi	r24, 0x02	; 2
    25a4:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <GPIO_readPort>
    25a8:	fe 01       	movw	r30, r28
    25aa:	ed 59       	subi	r30, 0x9D	; 157
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((command & 0x0F) << 4);
    25b0:	fe 01       	movw	r30, r28
    25b2:	ed 59       	subi	r30, 0x9D	; 157
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	80 81       	ld	r24, Z
    25b8:	28 2f       	mov	r18, r24
    25ba:	2f 70       	andi	r18, 0x0F	; 15
    25bc:	fe 01       	movw	r30, r28
    25be:	ec 59       	subi	r30, 0x9C	; 156
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	80 81       	ld	r24, Z
    25c4:	88 2f       	mov	r24, r24
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	82 95       	swap	r24
    25ca:	92 95       	swap	r25
    25cc:	90 7f       	andi	r25, 0xF0	; 240
    25ce:	98 27       	eor	r25, r24
    25d0:	80 7f       	andi	r24, 0xF0	; 240
    25d2:	98 27       	eor	r25, r24
    25d4:	82 2b       	or	r24, r18
    25d6:	fe 01       	movw	r30, r28
    25d8:	ed 59       	subi	r30, 0x9D	; 157
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	80 83       	st	Z, r24
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (command & 0x0F);
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    25de:	fe 01       	movw	r30, r28
    25e0:	ed 59       	subi	r30, 0x9D	; 157
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	82 e0       	ldi	r24, 0x02	; 2
    25e6:	60 81       	ld	r22, Z
    25e8:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <GPIO_writePort>
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	a0 e8       	ldi	r26, 0x80	; 128
    25f2:	bf e3       	ldi	r27, 0x3F	; 63
    25f4:	89 8f       	std	Y+25, r24	; 0x19
    25f6:	9a 8f       	std	Y+26, r25	; 0x1a
    25f8:	ab 8f       	std	Y+27, r26	; 0x1b
    25fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fc:	69 8d       	ldd	r22, Y+25	; 0x19
    25fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2600:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2602:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	4a e7       	ldi	r20, 0x7A	; 122
    260a:	53 e4       	ldi	r21, 0x43	; 67
    260c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	8d 8b       	std	Y+21, r24	; 0x15
    2616:	9e 8b       	std	Y+22, r25	; 0x16
    2618:	af 8b       	std	Y+23, r26	; 0x17
    261a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    261c:	6d 89       	ldd	r22, Y+21	; 0x15
    261e:	7e 89       	ldd	r23, Y+22	; 0x16
    2620:	8f 89       	ldd	r24, Y+23	; 0x17
    2622:	98 8d       	ldd	r25, Y+24	; 0x18
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	40 e8       	ldi	r20, 0x80	; 128
    262a:	5f e3       	ldi	r21, 0x3F	; 63
    262c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2630:	88 23       	and	r24, r24
    2632:	2c f4       	brge	.+10     	; 0x263e <LCD_sendCommand+0x6d2>
		__ticks = 1;
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	9c 8b       	std	Y+20, r25	; 0x14
    263a:	8b 8b       	std	Y+19, r24	; 0x13
    263c:	3f c0       	rjmp	.+126    	; 0x26bc <LCD_sendCommand+0x750>
	else if (__tmp > 65535)
    263e:	6d 89       	ldd	r22, Y+21	; 0x15
    2640:	7e 89       	ldd	r23, Y+22	; 0x16
    2642:	8f 89       	ldd	r24, Y+23	; 0x17
    2644:	98 8d       	ldd	r25, Y+24	; 0x18
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	3f ef       	ldi	r19, 0xFF	; 255
    264a:	4f e7       	ldi	r20, 0x7F	; 127
    264c:	57 e4       	ldi	r21, 0x47	; 71
    264e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2652:	18 16       	cp	r1, r24
    2654:	4c f5       	brge	.+82     	; 0x26a8 <LCD_sendCommand+0x73c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2656:	69 8d       	ldd	r22, Y+25	; 0x19
    2658:	7a 8d       	ldd	r23, Y+26	; 0x1a
    265a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    265c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	40 e2       	ldi	r20, 0x20	; 32
    2664:	51 e4       	ldi	r21, 0x41	; 65
    2666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	bc 01       	movw	r22, r24
    2670:	cd 01       	movw	r24, r26
    2672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	9c 8b       	std	Y+20, r25	; 0x14
    267c:	8b 8b       	std	Y+19, r24	; 0x13
    267e:	0f c0       	rjmp	.+30     	; 0x269e <LCD_sendCommand+0x732>
    2680:	89 e1       	ldi	r24, 0x19	; 25
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	9a 8b       	std	Y+18, r25	; 0x12
    2686:	89 8b       	std	Y+17, r24	; 0x11
    2688:	89 89       	ldd	r24, Y+17	; 0x11
    268a:	9a 89       	ldd	r25, Y+18	; 0x12
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	f1 f7       	brne	.-4      	; 0x268c <LCD_sendCommand+0x720>
    2690:	9a 8b       	std	Y+18, r25	; 0x12
    2692:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2694:	8b 89       	ldd	r24, Y+19	; 0x13
    2696:	9c 89       	ldd	r25, Y+20	; 0x14
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	9c 8b       	std	Y+20, r25	; 0x14
    269c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    269e:	8b 89       	ldd	r24, Y+19	; 0x13
    26a0:	9c 89       	ldd	r25, Y+20	; 0x14
    26a2:	00 97       	sbiw	r24, 0x00	; 0
    26a4:	69 f7       	brne	.-38     	; 0x2680 <LCD_sendCommand+0x714>
    26a6:	14 c0       	rjmp	.+40     	; 0x26d0 <LCD_sendCommand+0x764>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a8:	6d 89       	ldd	r22, Y+21	; 0x15
    26aa:	7e 89       	ldd	r23, Y+22	; 0x16
    26ac:	8f 89       	ldd	r24, Y+23	; 0x17
    26ae:	98 8d       	ldd	r25, Y+24	; 0x18
    26b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	9c 8b       	std	Y+20, r25	; 0x14
    26ba:	8b 8b       	std	Y+19, r24	; 0x13
    26bc:	8b 89       	ldd	r24, Y+19	; 0x13
    26be:	9c 89       	ldd	r25, Y+20	; 0x14
    26c0:	98 8b       	std	Y+16, r25	; 0x10
    26c2:	8f 87       	std	Y+15, r24	; 0x0f
    26c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c6:	98 89       	ldd	r25, Y+16	; 0x10
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	f1 f7       	brne	.-4      	; 0x26c8 <LCD_sendCommand+0x75c>
    26cc:	98 8b       	std	Y+16, r25	; 0x10
    26ce:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    26d0:	83 e0       	ldi	r24, 0x03	; 3
    26d2:	66 e0       	ldi	r22, 0x06	; 6
    26d4:	40 e0       	ldi	r20, 0x00	; 0
    26d6:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_writePin>
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	a0 e8       	ldi	r26, 0x80	; 128
    26e0:	bf e3       	ldi	r27, 0x3F	; 63
    26e2:	8b 87       	std	Y+11, r24	; 0x0b
    26e4:	9c 87       	std	Y+12, r25	; 0x0c
    26e6:	ad 87       	std	Y+13, r26	; 0x0d
    26e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	4a e7       	ldi	r20, 0x7A	; 122
    26f8:	53 e4       	ldi	r21, 0x43	; 67
    26fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	8f 83       	std	Y+7, r24	; 0x07
    2704:	98 87       	std	Y+8, r25	; 0x08
    2706:	a9 87       	std	Y+9, r26	; 0x09
    2708:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    270a:	6f 81       	ldd	r22, Y+7	; 0x07
    270c:	78 85       	ldd	r23, Y+8	; 0x08
    270e:	89 85       	ldd	r24, Y+9	; 0x09
    2710:	9a 85       	ldd	r25, Y+10	; 0x0a
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	40 e8       	ldi	r20, 0x80	; 128
    2718:	5f e3       	ldi	r21, 0x3F	; 63
    271a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    271e:	88 23       	and	r24, r24
    2720:	2c f4       	brge	.+10     	; 0x272c <LCD_sendCommand+0x7c0>
		__ticks = 1;
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	9e 83       	std	Y+6, r25	; 0x06
    2728:	8d 83       	std	Y+5, r24	; 0x05
    272a:	3f c0       	rjmp	.+126    	; 0x27aa <LCD_sendCommand+0x83e>
	else if (__tmp > 65535)
    272c:	6f 81       	ldd	r22, Y+7	; 0x07
    272e:	78 85       	ldd	r23, Y+8	; 0x08
    2730:	89 85       	ldd	r24, Y+9	; 0x09
    2732:	9a 85       	ldd	r25, Y+10	; 0x0a
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	3f ef       	ldi	r19, 0xFF	; 255
    2738:	4f e7       	ldi	r20, 0x7F	; 127
    273a:	57 e4       	ldi	r21, 0x47	; 71
    273c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2740:	18 16       	cp	r1, r24
    2742:	4c f5       	brge	.+82     	; 0x2796 <LCD_sendCommand+0x82a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2744:	6b 85       	ldd	r22, Y+11	; 0x0b
    2746:	7c 85       	ldd	r23, Y+12	; 0x0c
    2748:	8d 85       	ldd	r24, Y+13	; 0x0d
    274a:	9e 85       	ldd	r25, Y+14	; 0x0e
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	40 e2       	ldi	r20, 0x20	; 32
    2752:	51 e4       	ldi	r21, 0x41	; 65
    2754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	bc 01       	movw	r22, r24
    275e:	cd 01       	movw	r24, r26
    2760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	9e 83       	std	Y+6, r25	; 0x06
    276a:	8d 83       	std	Y+5, r24	; 0x05
    276c:	0f c0       	rjmp	.+30     	; 0x278c <LCD_sendCommand+0x820>
    276e:	89 e1       	ldi	r24, 0x19	; 25
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	9c 83       	std	Y+4, r25	; 0x04
    2774:	8b 83       	std	Y+3, r24	; 0x03
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	9c 81       	ldd	r25, Y+4	; 0x04
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	f1 f7       	brne	.-4      	; 0x277a <LCD_sendCommand+0x80e>
    277e:	9c 83       	std	Y+4, r25	; 0x04
    2780:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2782:	8d 81       	ldd	r24, Y+5	; 0x05
    2784:	9e 81       	ldd	r25, Y+6	; 0x06
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	9e 83       	std	Y+6, r25	; 0x06
    278a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278c:	8d 81       	ldd	r24, Y+5	; 0x05
    278e:	9e 81       	ldd	r25, Y+6	; 0x06
    2790:	00 97       	sbiw	r24, 0x00	; 0
    2792:	69 f7       	brne	.-38     	; 0x276e <LCD_sendCommand+0x802>
    2794:	14 c0       	rjmp	.+40     	; 0x27be <LCD_sendCommand+0x852>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2796:	6f 81       	ldd	r22, Y+7	; 0x07
    2798:	78 85       	ldd	r23, Y+8	; 0x08
    279a:	89 85       	ldd	r24, Y+9	; 0x09
    279c:	9a 85       	ldd	r25, Y+10	; 0x0a
    279e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	9e 83       	std	Y+6, r25	; 0x06
    27a8:	8d 83       	std	Y+5, r24	; 0x05
    27aa:	8d 81       	ldd	r24, Y+5	; 0x05
    27ac:	9e 81       	ldd	r25, Y+6	; 0x06
    27ae:	9a 83       	std	Y+2, r25	; 0x02
    27b0:	89 83       	std	Y+1, r24	; 0x01
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	9a 81       	ldd	r25, Y+2	; 0x02
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	f1 f7       	brne	.-4      	; 0x27b6 <LCD_sendCommand+0x84a>
    27ba:	9a 83       	std	Y+2, r25	; 0x02
    27bc:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    27be:	cc 59       	subi	r28, 0x9C	; 156
    27c0:	df 4f       	sbci	r29, 0xFF	; 255
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	f8 94       	cli
    27c6:	de bf       	out	0x3e, r29	; 62
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	cf 91       	pop	r28
    27ce:	df 91       	pop	r29
    27d0:	1f 91       	pop	r17
    27d2:	0f 91       	pop	r16
    27d4:	08 95       	ret

000027d6 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    27d6:	0f 93       	push	r16
    27d8:	1f 93       	push	r17
    27da:	df 93       	push	r29
    27dc:	cf 93       	push	r28
    27de:	cd b7       	in	r28, 0x3d	; 61
    27e0:	de b7       	in	r29, 0x3e	; 62
    27e2:	c4 56       	subi	r28, 0x64	; 100
    27e4:	d0 40       	sbci	r29, 0x00	; 0
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	cd bf       	out	0x3d, r28	; 61
    27f0:	fe 01       	movw	r30, r28
    27f2:	ec 59       	subi	r30, 0x9C	; 156
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	80 83       	st	Z, r24
	uint8 lcd_port_value = 0;
    27f8:	fe 01       	movw	r30, r28
    27fa:	ed 59       	subi	r30, 0x9D	; 157
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	10 82       	st	Z, r1
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2800:	83 e0       	ldi	r24, 0x03	; 3
    2802:	64 e0       	ldi	r22, 0x04	; 4
    2804:	41 e0       	ldi	r20, 0x01	; 1
    2806:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    280a:	83 e0       	ldi	r24, 0x03	; 3
    280c:	65 e0       	ldi	r22, 0x05	; 5
    280e:	40 e0       	ldi	r20, 0x00	; 0
    2810:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_writePin>
    2814:	fe 01       	movw	r30, r28
    2816:	e1 5a       	subi	r30, 0xA1	; 161
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	a0 e8       	ldi	r26, 0x80	; 128
    2820:	bf e3       	ldi	r27, 0x3F	; 63
    2822:	80 83       	st	Z, r24
    2824:	91 83       	std	Z+1, r25	; 0x01
    2826:	a2 83       	std	Z+2, r26	; 0x02
    2828:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    282a:	8e 01       	movw	r16, r28
    282c:	05 5a       	subi	r16, 0xA5	; 165
    282e:	1f 4f       	sbci	r17, 0xFF	; 255
    2830:	fe 01       	movw	r30, r28
    2832:	e1 5a       	subi	r30, 0xA1	; 161
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	60 81       	ld	r22, Z
    2838:	71 81       	ldd	r23, Z+1	; 0x01
    283a:	82 81       	ldd	r24, Z+2	; 0x02
    283c:	93 81       	ldd	r25, Z+3	; 0x03
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	4a e7       	ldi	r20, 0x7A	; 122
    2844:	53 e4       	ldi	r21, 0x43	; 67
    2846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	f8 01       	movw	r30, r16
    2850:	80 83       	st	Z, r24
    2852:	91 83       	std	Z+1, r25	; 0x01
    2854:	a2 83       	std	Z+2, r26	; 0x02
    2856:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2858:	fe 01       	movw	r30, r28
    285a:	e5 5a       	subi	r30, 0xA5	; 165
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	60 81       	ld	r22, Z
    2860:	71 81       	ldd	r23, Z+1	; 0x01
    2862:	82 81       	ldd	r24, Z+2	; 0x02
    2864:	93 81       	ldd	r25, Z+3	; 0x03
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	40 e8       	ldi	r20, 0x80	; 128
    286c:	5f e3       	ldi	r21, 0x3F	; 63
    286e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2872:	88 23       	and	r24, r24
    2874:	44 f4       	brge	.+16     	; 0x2886 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    2876:	fe 01       	movw	r30, r28
    2878:	e7 5a       	subi	r30, 0xA7	; 167
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	91 83       	std	Z+1, r25	; 0x01
    2882:	80 83       	st	Z, r24
    2884:	64 c0       	rjmp	.+200    	; 0x294e <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    2886:	fe 01       	movw	r30, r28
    2888:	e5 5a       	subi	r30, 0xA5	; 165
    288a:	ff 4f       	sbci	r31, 0xFF	; 255
    288c:	60 81       	ld	r22, Z
    288e:	71 81       	ldd	r23, Z+1	; 0x01
    2890:	82 81       	ldd	r24, Z+2	; 0x02
    2892:	93 81       	ldd	r25, Z+3	; 0x03
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	3f ef       	ldi	r19, 0xFF	; 255
    2898:	4f e7       	ldi	r20, 0x7F	; 127
    289a:	57 e4       	ldi	r21, 0x47	; 71
    289c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28a0:	18 16       	cp	r1, r24
    28a2:	0c f0       	brlt	.+2      	; 0x28a6 <LCD_displayCharacter+0xd0>
    28a4:	43 c0       	rjmp	.+134    	; 0x292c <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a6:	fe 01       	movw	r30, r28
    28a8:	e1 5a       	subi	r30, 0xA1	; 161
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	60 81       	ld	r22, Z
    28ae:	71 81       	ldd	r23, Z+1	; 0x01
    28b0:	82 81       	ldd	r24, Z+2	; 0x02
    28b2:	93 81       	ldd	r25, Z+3	; 0x03
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	40 e2       	ldi	r20, 0x20	; 32
    28ba:	51 e4       	ldi	r21, 0x41	; 65
    28bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	8e 01       	movw	r16, r28
    28c6:	07 5a       	subi	r16, 0xA7	; 167
    28c8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ca:	bc 01       	movw	r22, r24
    28cc:	cd 01       	movw	r24, r26
    28ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	f8 01       	movw	r30, r16
    28d8:	91 83       	std	Z+1, r25	; 0x01
    28da:	80 83       	st	Z, r24
    28dc:	1f c0       	rjmp	.+62     	; 0x291c <LCD_displayCharacter+0x146>
    28de:	fe 01       	movw	r30, r28
    28e0:	e9 5a       	subi	r30, 0xA9	; 169
    28e2:	ff 4f       	sbci	r31, 0xFF	; 255
    28e4:	89 e1       	ldi	r24, 0x19	; 25
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	91 83       	std	Z+1, r25	; 0x01
    28ea:	80 83       	st	Z, r24
    28ec:	fe 01       	movw	r30, r28
    28ee:	e9 5a       	subi	r30, 0xA9	; 169
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	80 81       	ld	r24, Z
    28f4:	91 81       	ldd	r25, Z+1	; 0x01
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	f1 f7       	brne	.-4      	; 0x28f6 <LCD_displayCharacter+0x120>
    28fa:	fe 01       	movw	r30, r28
    28fc:	e9 5a       	subi	r30, 0xA9	; 169
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	91 83       	std	Z+1, r25	; 0x01
    2902:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2904:	de 01       	movw	r26, r28
    2906:	a7 5a       	subi	r26, 0xA7	; 167
    2908:	bf 4f       	sbci	r27, 0xFF	; 255
    290a:	fe 01       	movw	r30, r28
    290c:	e7 5a       	subi	r30, 0xA7	; 167
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	80 81       	ld	r24, Z
    2912:	91 81       	ldd	r25, Z+1	; 0x01
    2914:	01 97       	sbiw	r24, 0x01	; 1
    2916:	11 96       	adiw	r26, 0x01	; 1
    2918:	9c 93       	st	X, r25
    291a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291c:	fe 01       	movw	r30, r28
    291e:	e7 5a       	subi	r30, 0xA7	; 167
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	80 81       	ld	r24, Z
    2924:	91 81       	ldd	r25, Z+1	; 0x01
    2926:	00 97       	sbiw	r24, 0x00	; 0
    2928:	d1 f6       	brne	.-76     	; 0x28de <LCD_displayCharacter+0x108>
    292a:	27 c0       	rjmp	.+78     	; 0x297a <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    292c:	8e 01       	movw	r16, r28
    292e:	07 5a       	subi	r16, 0xA7	; 167
    2930:	1f 4f       	sbci	r17, 0xFF	; 255
    2932:	fe 01       	movw	r30, r28
    2934:	e5 5a       	subi	r30, 0xA5	; 165
    2936:	ff 4f       	sbci	r31, 0xFF	; 255
    2938:	60 81       	ld	r22, Z
    293a:	71 81       	ldd	r23, Z+1	; 0x01
    293c:	82 81       	ldd	r24, Z+2	; 0x02
    293e:	93 81       	ldd	r25, Z+3	; 0x03
    2940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	f8 01       	movw	r30, r16
    294a:	91 83       	std	Z+1, r25	; 0x01
    294c:	80 83       	st	Z, r24
    294e:	de 01       	movw	r26, r28
    2950:	ab 5a       	subi	r26, 0xAB	; 171
    2952:	bf 4f       	sbci	r27, 0xFF	; 255
    2954:	fe 01       	movw	r30, r28
    2956:	e7 5a       	subi	r30, 0xA7	; 167
    2958:	ff 4f       	sbci	r31, 0xFF	; 255
    295a:	80 81       	ld	r24, Z
    295c:	91 81       	ldd	r25, Z+1	; 0x01
    295e:	8d 93       	st	X+, r24
    2960:	9c 93       	st	X, r25
    2962:	fe 01       	movw	r30, r28
    2964:	eb 5a       	subi	r30, 0xAB	; 171
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	80 81       	ld	r24, Z
    296a:	91 81       	ldd	r25, Z+1	; 0x01
    296c:	01 97       	sbiw	r24, 0x01	; 1
    296e:	f1 f7       	brne	.-4      	; 0x296c <LCD_displayCharacter+0x196>
    2970:	fe 01       	movw	r30, r28
    2972:	eb 5a       	subi	r30, 0xAB	; 171
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	91 83       	std	Z+1, r25	; 0x01
    2978:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    297a:	83 e0       	ldi	r24, 0x03	; 3
    297c:	66 e0       	ldi	r22, 0x06	; 6
    297e:	41 e0       	ldi	r20, 0x01	; 1
    2980:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_writePin>
    2984:	fe 01       	movw	r30, r28
    2986:	ef 5a       	subi	r30, 0xAF	; 175
    2988:	ff 4f       	sbci	r31, 0xFF	; 255
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	a0 e8       	ldi	r26, 0x80	; 128
    2990:	bf e3       	ldi	r27, 0x3F	; 63
    2992:	80 83       	st	Z, r24
    2994:	91 83       	std	Z+1, r25	; 0x01
    2996:	a2 83       	std	Z+2, r26	; 0x02
    2998:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    299a:	8e 01       	movw	r16, r28
    299c:	03 5b       	subi	r16, 0xB3	; 179
    299e:	1f 4f       	sbci	r17, 0xFF	; 255
    29a0:	fe 01       	movw	r30, r28
    29a2:	ef 5a       	subi	r30, 0xAF	; 175
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	60 81       	ld	r22, Z
    29a8:	71 81       	ldd	r23, Z+1	; 0x01
    29aa:	82 81       	ldd	r24, Z+2	; 0x02
    29ac:	93 81       	ldd	r25, Z+3	; 0x03
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	4a e7       	ldi	r20, 0x7A	; 122
    29b4:	53 e4       	ldi	r21, 0x43	; 67
    29b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	f8 01       	movw	r30, r16
    29c0:	80 83       	st	Z, r24
    29c2:	91 83       	std	Z+1, r25	; 0x01
    29c4:	a2 83       	std	Z+2, r26	; 0x02
    29c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29c8:	fe 01       	movw	r30, r28
    29ca:	e3 5b       	subi	r30, 0xB3	; 179
    29cc:	ff 4f       	sbci	r31, 0xFF	; 255
    29ce:	60 81       	ld	r22, Z
    29d0:	71 81       	ldd	r23, Z+1	; 0x01
    29d2:	82 81       	ldd	r24, Z+2	; 0x02
    29d4:	93 81       	ldd	r25, Z+3	; 0x03
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e8       	ldi	r20, 0x80	; 128
    29dc:	5f e3       	ldi	r21, 0x3F	; 63
    29de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29e2:	88 23       	and	r24, r24
    29e4:	44 f4       	brge	.+16     	; 0x29f6 <LCD_displayCharacter+0x220>
		__ticks = 1;
    29e6:	fe 01       	movw	r30, r28
    29e8:	e5 5b       	subi	r30, 0xB5	; 181
    29ea:	ff 4f       	sbci	r31, 0xFF	; 255
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	91 83       	std	Z+1, r25	; 0x01
    29f2:	80 83       	st	Z, r24
    29f4:	64 c0       	rjmp	.+200    	; 0x2abe <LCD_displayCharacter+0x2e8>
	else if (__tmp > 65535)
    29f6:	fe 01       	movw	r30, r28
    29f8:	e3 5b       	subi	r30, 0xB3	; 179
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	60 81       	ld	r22, Z
    29fe:	71 81       	ldd	r23, Z+1	; 0x01
    2a00:	82 81       	ldd	r24, Z+2	; 0x02
    2a02:	93 81       	ldd	r25, Z+3	; 0x03
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	3f ef       	ldi	r19, 0xFF	; 255
    2a08:	4f e7       	ldi	r20, 0x7F	; 127
    2a0a:	57 e4       	ldi	r21, 0x47	; 71
    2a0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a10:	18 16       	cp	r1, r24
    2a12:	0c f0       	brlt	.+2      	; 0x2a16 <LCD_displayCharacter+0x240>
    2a14:	43 c0       	rjmp	.+134    	; 0x2a9c <LCD_displayCharacter+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a16:	fe 01       	movw	r30, r28
    2a18:	ef 5a       	subi	r30, 0xAF	; 175
    2a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1c:	60 81       	ld	r22, Z
    2a1e:	71 81       	ldd	r23, Z+1	; 0x01
    2a20:	82 81       	ldd	r24, Z+2	; 0x02
    2a22:	93 81       	ldd	r25, Z+3	; 0x03
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	40 e2       	ldi	r20, 0x20	; 32
    2a2a:	51 e4       	ldi	r21, 0x41	; 65
    2a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	8e 01       	movw	r16, r28
    2a36:	05 5b       	subi	r16, 0xB5	; 181
    2a38:	1f 4f       	sbci	r17, 0xFF	; 255
    2a3a:	bc 01       	movw	r22, r24
    2a3c:	cd 01       	movw	r24, r26
    2a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	f8 01       	movw	r30, r16
    2a48:	91 83       	std	Z+1, r25	; 0x01
    2a4a:	80 83       	st	Z, r24
    2a4c:	1f c0       	rjmp	.+62     	; 0x2a8c <LCD_displayCharacter+0x2b6>
    2a4e:	fe 01       	movw	r30, r28
    2a50:	e7 5b       	subi	r30, 0xB7	; 183
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	89 e1       	ldi	r24, 0x19	; 25
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	91 83       	std	Z+1, r25	; 0x01
    2a5a:	80 83       	st	Z, r24
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	e7 5b       	subi	r30, 0xB7	; 183
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	80 81       	ld	r24, Z
    2a64:	91 81       	ldd	r25, Z+1	; 0x01
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <LCD_displayCharacter+0x290>
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	e7 5b       	subi	r30, 0xB7	; 183
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	91 83       	std	Z+1, r25	; 0x01
    2a72:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a74:	de 01       	movw	r26, r28
    2a76:	a5 5b       	subi	r26, 0xB5	; 181
    2a78:	bf 4f       	sbci	r27, 0xFF	; 255
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	e5 5b       	subi	r30, 0xB5	; 181
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	80 81       	ld	r24, Z
    2a82:	91 81       	ldd	r25, Z+1	; 0x01
    2a84:	01 97       	sbiw	r24, 0x01	; 1
    2a86:	11 96       	adiw	r26, 0x01	; 1
    2a88:	9c 93       	st	X, r25
    2a8a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	e5 5b       	subi	r30, 0xB5	; 181
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	80 81       	ld	r24, Z
    2a94:	91 81       	ldd	r25, Z+1	; 0x01
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	d1 f6       	brne	.-76     	; 0x2a4e <LCD_displayCharacter+0x278>
    2a9a:	27 c0       	rjmp	.+78     	; 0x2aea <LCD_displayCharacter+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9c:	8e 01       	movw	r16, r28
    2a9e:	05 5b       	subi	r16, 0xB5	; 181
    2aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	e3 5b       	subi	r30, 0xB3	; 179
    2aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa8:	60 81       	ld	r22, Z
    2aaa:	71 81       	ldd	r23, Z+1	; 0x01
    2aac:	82 81       	ldd	r24, Z+2	; 0x02
    2aae:	93 81       	ldd	r25, Z+3	; 0x03
    2ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	f8 01       	movw	r30, r16
    2aba:	91 83       	std	Z+1, r25	; 0x01
    2abc:	80 83       	st	Z, r24
    2abe:	de 01       	movw	r26, r28
    2ac0:	a9 5b       	subi	r26, 0xB9	; 185
    2ac2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ac4:	fe 01       	movw	r30, r28
    2ac6:	e5 5b       	subi	r30, 0xB5	; 181
    2ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aca:	80 81       	ld	r24, Z
    2acc:	91 81       	ldd	r25, Z+1	; 0x01
    2ace:	8d 93       	st	X+, r24
    2ad0:	9c 93       	st	X, r25
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	e9 5b       	subi	r30, 0xB9	; 185
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	80 81       	ld	r24, Z
    2ada:	91 81       	ldd	r25, Z+1	; 0x01
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	f1 f7       	brne	.-4      	; 0x2adc <LCD_displayCharacter+0x306>
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	e9 5b       	subi	r30, 0xB9	; 185
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	91 83       	std	Z+1, r25	; 0x01
    2ae8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required data to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    2aea:	82 e0       	ldi	r24, 0x02	; 2
    2aec:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <GPIO_readPort>
    2af0:	fe 01       	movw	r30, r28
    2af2:	ed 59       	subi	r30, 0x9D	; 157
    2af4:	ff 4f       	sbci	r31, 0xFF	; 255
    2af6:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (data & 0xF0);
    2af8:	fe 01       	movw	r30, r28
    2afa:	ed 59       	subi	r30, 0x9D	; 157
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	80 81       	ld	r24, Z
    2b00:	98 2f       	mov	r25, r24
    2b02:	9f 70       	andi	r25, 0x0F	; 15
    2b04:	fe 01       	movw	r30, r28
    2b06:	ec 59       	subi	r30, 0x9C	; 156
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	80 81       	ld	r24, Z
    2b0c:	80 7f       	andi	r24, 0xF0	; 240
    2b0e:	89 2b       	or	r24, r25
    2b10:	fe 01       	movw	r30, r28
    2b12:	ed 59       	subi	r30, 0x9D	; 157
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	80 83       	st	Z, r24
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((data & 0xF0) >> 4);
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    2b18:	fe 01       	movw	r30, r28
    2b1a:	ed 59       	subi	r30, 0x9D	; 157
    2b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1e:	82 e0       	ldi	r24, 0x02	; 2
    2b20:	60 81       	ld	r22, Z
    2b22:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <GPIO_writePort>
    2b26:	fe 01       	movw	r30, r28
    2b28:	ed 5b       	subi	r30, 0xBD	; 189
    2b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	a0 e8       	ldi	r26, 0x80	; 128
    2b32:	bf e3       	ldi	r27, 0x3F	; 63
    2b34:	80 83       	st	Z, r24
    2b36:	91 83       	std	Z+1, r25	; 0x01
    2b38:	a2 83       	std	Z+2, r26	; 0x02
    2b3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b3c:	8e 01       	movw	r16, r28
    2b3e:	01 5c       	subi	r16, 0xC1	; 193
    2b40:	1f 4f       	sbci	r17, 0xFF	; 255
    2b42:	fe 01       	movw	r30, r28
    2b44:	ed 5b       	subi	r30, 0xBD	; 189
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	60 81       	ld	r22, Z
    2b4a:	71 81       	ldd	r23, Z+1	; 0x01
    2b4c:	82 81       	ldd	r24, Z+2	; 0x02
    2b4e:	93 81       	ldd	r25, Z+3	; 0x03
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	4a e7       	ldi	r20, 0x7A	; 122
    2b56:	53 e4       	ldi	r21, 0x43	; 67
    2b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	f8 01       	movw	r30, r16
    2b62:	80 83       	st	Z, r24
    2b64:	91 83       	std	Z+1, r25	; 0x01
    2b66:	a2 83       	std	Z+2, r26	; 0x02
    2b68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	ff 96       	adiw	r30, 0x3f	; 63
    2b6e:	60 81       	ld	r22, Z
    2b70:	71 81       	ldd	r23, Z+1	; 0x01
    2b72:	82 81       	ldd	r24, Z+2	; 0x02
    2b74:	93 81       	ldd	r25, Z+3	; 0x03
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	40 e8       	ldi	r20, 0x80	; 128
    2b7c:	5f e3       	ldi	r21, 0x3F	; 63
    2b7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b82:	88 23       	and	r24, r24
    2b84:	2c f4       	brge	.+10     	; 0x2b90 <LCD_displayCharacter+0x3ba>
		__ticks = 1;
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	9e af       	std	Y+62, r25	; 0x3e
    2b8c:	8d af       	std	Y+61, r24	; 0x3d
    2b8e:	46 c0       	rjmp	.+140    	; 0x2c1c <LCD_displayCharacter+0x446>
	else if (__tmp > 65535)
    2b90:	fe 01       	movw	r30, r28
    2b92:	ff 96       	adiw	r30, 0x3f	; 63
    2b94:	60 81       	ld	r22, Z
    2b96:	71 81       	ldd	r23, Z+1	; 0x01
    2b98:	82 81       	ldd	r24, Z+2	; 0x02
    2b9a:	93 81       	ldd	r25, Z+3	; 0x03
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ba0:	4f e7       	ldi	r20, 0x7F	; 127
    2ba2:	57 e4       	ldi	r21, 0x47	; 71
    2ba4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ba8:	18 16       	cp	r1, r24
    2baa:	64 f5       	brge	.+88     	; 0x2c04 <LCD_displayCharacter+0x42e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bac:	fe 01       	movw	r30, r28
    2bae:	ed 5b       	subi	r30, 0xBD	; 189
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	60 81       	ld	r22, Z
    2bb4:	71 81       	ldd	r23, Z+1	; 0x01
    2bb6:	82 81       	ldd	r24, Z+2	; 0x02
    2bb8:	93 81       	ldd	r25, Z+3	; 0x03
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	40 e2       	ldi	r20, 0x20	; 32
    2bc0:	51 e4       	ldi	r21, 0x41	; 65
    2bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	bc 01       	movw	r22, r24
    2bcc:	cd 01       	movw	r24, r26
    2bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	9e af       	std	Y+62, r25	; 0x3e
    2bd8:	8d af       	std	Y+61, r24	; 0x3d
    2bda:	0f c0       	rjmp	.+30     	; 0x2bfa <LCD_displayCharacter+0x424>
    2bdc:	89 e1       	ldi	r24, 0x19	; 25
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	9c af       	std	Y+60, r25	; 0x3c
    2be2:	8b af       	std	Y+59, r24	; 0x3b
    2be4:	8b ad       	ldd	r24, Y+59	; 0x3b
    2be6:	9c ad       	ldd	r25, Y+60	; 0x3c
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	f1 f7       	brne	.-4      	; 0x2be8 <LCD_displayCharacter+0x412>
    2bec:	9c af       	std	Y+60, r25	; 0x3c
    2bee:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bf2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	9e af       	std	Y+62, r25	; 0x3e
    2bf8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfa:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bfc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bfe:	00 97       	sbiw	r24, 0x00	; 0
    2c00:	69 f7       	brne	.-38     	; 0x2bdc <LCD_displayCharacter+0x406>
    2c02:	16 c0       	rjmp	.+44     	; 0x2c30 <LCD_displayCharacter+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c04:	fe 01       	movw	r30, r28
    2c06:	ff 96       	adiw	r30, 0x3f	; 63
    2c08:	60 81       	ld	r22, Z
    2c0a:	71 81       	ldd	r23, Z+1	; 0x01
    2c0c:	82 81       	ldd	r24, Z+2	; 0x02
    2c0e:	93 81       	ldd	r25, Z+3	; 0x03
    2c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	9e af       	std	Y+62, r25	; 0x3e
    2c1a:	8d af       	std	Y+61, r24	; 0x3d
    2c1c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c1e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c20:	9a af       	std	Y+58, r25	; 0x3a
    2c22:	89 af       	std	Y+57, r24	; 0x39
    2c24:	89 ad       	ldd	r24, Y+57	; 0x39
    2c26:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	f1 f7       	brne	.-4      	; 0x2c28 <LCD_displayCharacter+0x452>
    2c2c:	9a af       	std	Y+58, r25	; 0x3a
    2c2e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2c30:	83 e0       	ldi	r24, 0x03	; 3
    2c32:	66 e0       	ldi	r22, 0x06	; 6
    2c34:	40 e0       	ldi	r20, 0x00	; 0
    2c36:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_writePin>
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	a0 e8       	ldi	r26, 0x80	; 128
    2c40:	bf e3       	ldi	r27, 0x3F	; 63
    2c42:	8d ab       	std	Y+53, r24	; 0x35
    2c44:	9e ab       	std	Y+54, r25	; 0x36
    2c46:	af ab       	std	Y+55, r26	; 0x37
    2c48:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c4a:	6d a9       	ldd	r22, Y+53	; 0x35
    2c4c:	7e a9       	ldd	r23, Y+54	; 0x36
    2c4e:	8f a9       	ldd	r24, Y+55	; 0x37
    2c50:	98 ad       	ldd	r25, Y+56	; 0x38
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	4a e7       	ldi	r20, 0x7A	; 122
    2c58:	53 e4       	ldi	r21, 0x43	; 67
    2c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	89 ab       	std	Y+49, r24	; 0x31
    2c64:	9a ab       	std	Y+50, r25	; 0x32
    2c66:	ab ab       	std	Y+51, r26	; 0x33
    2c68:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c6a:	69 a9       	ldd	r22, Y+49	; 0x31
    2c6c:	7a a9       	ldd	r23, Y+50	; 0x32
    2c6e:	8b a9       	ldd	r24, Y+51	; 0x33
    2c70:	9c a9       	ldd	r25, Y+52	; 0x34
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	40 e8       	ldi	r20, 0x80	; 128
    2c78:	5f e3       	ldi	r21, 0x3F	; 63
    2c7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c7e:	88 23       	and	r24, r24
    2c80:	2c f4       	brge	.+10     	; 0x2c8c <LCD_displayCharacter+0x4b6>
		__ticks = 1;
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	98 ab       	std	Y+48, r25	; 0x30
    2c88:	8f a7       	std	Y+47, r24	; 0x2f
    2c8a:	3f c0       	rjmp	.+126    	; 0x2d0a <LCD_displayCharacter+0x534>
	else if (__tmp > 65535)
    2c8c:	69 a9       	ldd	r22, Y+49	; 0x31
    2c8e:	7a a9       	ldd	r23, Y+50	; 0x32
    2c90:	8b a9       	ldd	r24, Y+51	; 0x33
    2c92:	9c a9       	ldd	r25, Y+52	; 0x34
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	3f ef       	ldi	r19, 0xFF	; 255
    2c98:	4f e7       	ldi	r20, 0x7F	; 127
    2c9a:	57 e4       	ldi	r21, 0x47	; 71
    2c9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ca0:	18 16       	cp	r1, r24
    2ca2:	4c f5       	brge	.+82     	; 0x2cf6 <LCD_displayCharacter+0x520>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca4:	6d a9       	ldd	r22, Y+53	; 0x35
    2ca6:	7e a9       	ldd	r23, Y+54	; 0x36
    2ca8:	8f a9       	ldd	r24, Y+55	; 0x37
    2caa:	98 ad       	ldd	r25, Y+56	; 0x38
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	40 e2       	ldi	r20, 0x20	; 32
    2cb2:	51 e4       	ldi	r21, 0x41	; 65
    2cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	bc 01       	movw	r22, r24
    2cbe:	cd 01       	movw	r24, r26
    2cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	98 ab       	std	Y+48, r25	; 0x30
    2cca:	8f a7       	std	Y+47, r24	; 0x2f
    2ccc:	0f c0       	rjmp	.+30     	; 0x2cec <LCD_displayCharacter+0x516>
    2cce:	89 e1       	ldi	r24, 0x19	; 25
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	9e a7       	std	Y+46, r25	; 0x2e
    2cd4:	8d a7       	std	Y+45, r24	; 0x2d
    2cd6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2cd8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2cda:	01 97       	sbiw	r24, 0x01	; 1
    2cdc:	f1 f7       	brne	.-4      	; 0x2cda <LCD_displayCharacter+0x504>
    2cde:	9e a7       	std	Y+46, r25	; 0x2e
    2ce0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ce4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ce6:	01 97       	sbiw	r24, 0x01	; 1
    2ce8:	98 ab       	std	Y+48, r25	; 0x30
    2cea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cec:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cee:	98 a9       	ldd	r25, Y+48	; 0x30
    2cf0:	00 97       	sbiw	r24, 0x00	; 0
    2cf2:	69 f7       	brne	.-38     	; 0x2cce <LCD_displayCharacter+0x4f8>
    2cf4:	14 c0       	rjmp	.+40     	; 0x2d1e <LCD_displayCharacter+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf6:	69 a9       	ldd	r22, Y+49	; 0x31
    2cf8:	7a a9       	ldd	r23, Y+50	; 0x32
    2cfa:	8b a9       	ldd	r24, Y+51	; 0x33
    2cfc:	9c a9       	ldd	r25, Y+52	; 0x34
    2cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	98 ab       	std	Y+48, r25	; 0x30
    2d08:	8f a7       	std	Y+47, r24	; 0x2f
    2d0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d0c:	98 a9       	ldd	r25, Y+48	; 0x30
    2d0e:	9c a7       	std	Y+44, r25	; 0x2c
    2d10:	8b a7       	std	Y+43, r24	; 0x2b
    2d12:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d14:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d16:	01 97       	sbiw	r24, 0x01	; 1
    2d18:	f1 f7       	brne	.-4      	; 0x2d16 <LCD_displayCharacter+0x540>
    2d1a:	9c a7       	std	Y+44, r25	; 0x2c
    2d1c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2d1e:	83 e0       	ldi	r24, 0x03	; 3
    2d20:	66 e0       	ldi	r22, 0x06	; 6
    2d22:	41 e0       	ldi	r20, 0x01	; 1
    2d24:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_writePin>
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	a0 e8       	ldi	r26, 0x80	; 128
    2d2e:	bf e3       	ldi	r27, 0x3F	; 63
    2d30:	8f a3       	std	Y+39, r24	; 0x27
    2d32:	98 a7       	std	Y+40, r25	; 0x28
    2d34:	a9 a7       	std	Y+41, r26	; 0x29
    2d36:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d38:	6f a1       	ldd	r22, Y+39	; 0x27
    2d3a:	78 a5       	ldd	r23, Y+40	; 0x28
    2d3c:	89 a5       	ldd	r24, Y+41	; 0x29
    2d3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	4a e7       	ldi	r20, 0x7A	; 122
    2d46:	53 e4       	ldi	r21, 0x43	; 67
    2d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	8b a3       	std	Y+35, r24	; 0x23
    2d52:	9c a3       	std	Y+36, r25	; 0x24
    2d54:	ad a3       	std	Y+37, r26	; 0x25
    2d56:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d58:	6b a1       	ldd	r22, Y+35	; 0x23
    2d5a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d5c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d5e:	9e a1       	ldd	r25, Y+38	; 0x26
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	40 e8       	ldi	r20, 0x80	; 128
    2d66:	5f e3       	ldi	r21, 0x3F	; 63
    2d68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d6c:	88 23       	and	r24, r24
    2d6e:	2c f4       	brge	.+10     	; 0x2d7a <LCD_displayCharacter+0x5a4>
		__ticks = 1;
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	9a a3       	std	Y+34, r25	; 0x22
    2d76:	89 a3       	std	Y+33, r24	; 0x21
    2d78:	3f c0       	rjmp	.+126    	; 0x2df8 <LCD_displayCharacter+0x622>
	else if (__tmp > 65535)
    2d7a:	6b a1       	ldd	r22, Y+35	; 0x23
    2d7c:	7c a1       	ldd	r23, Y+36	; 0x24
    2d7e:	8d a1       	ldd	r24, Y+37	; 0x25
    2d80:	9e a1       	ldd	r25, Y+38	; 0x26
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	3f ef       	ldi	r19, 0xFF	; 255
    2d86:	4f e7       	ldi	r20, 0x7F	; 127
    2d88:	57 e4       	ldi	r21, 0x47	; 71
    2d8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d8e:	18 16       	cp	r1, r24
    2d90:	4c f5       	brge	.+82     	; 0x2de4 <LCD_displayCharacter+0x60e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d92:	6f a1       	ldd	r22, Y+39	; 0x27
    2d94:	78 a5       	ldd	r23, Y+40	; 0x28
    2d96:	89 a5       	ldd	r24, Y+41	; 0x29
    2d98:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	40 e2       	ldi	r20, 0x20	; 32
    2da0:	51 e4       	ldi	r21, 0x41	; 65
    2da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	bc 01       	movw	r22, r24
    2dac:	cd 01       	movw	r24, r26
    2dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	9a a3       	std	Y+34, r25	; 0x22
    2db8:	89 a3       	std	Y+33, r24	; 0x21
    2dba:	0f c0       	rjmp	.+30     	; 0x2dda <LCD_displayCharacter+0x604>
    2dbc:	89 e1       	ldi	r24, 0x19	; 25
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	98 a3       	std	Y+32, r25	; 0x20
    2dc2:	8f 8f       	std	Y+31, r24	; 0x1f
    2dc4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dc6:	98 a1       	ldd	r25, Y+32	; 0x20
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	f1 f7       	brne	.-4      	; 0x2dc8 <LCD_displayCharacter+0x5f2>
    2dcc:	98 a3       	std	Y+32, r25	; 0x20
    2dce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd0:	89 a1       	ldd	r24, Y+33	; 0x21
    2dd2:	9a a1       	ldd	r25, Y+34	; 0x22
    2dd4:	01 97       	sbiw	r24, 0x01	; 1
    2dd6:	9a a3       	std	Y+34, r25	; 0x22
    2dd8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dda:	89 a1       	ldd	r24, Y+33	; 0x21
    2ddc:	9a a1       	ldd	r25, Y+34	; 0x22
    2dde:	00 97       	sbiw	r24, 0x00	; 0
    2de0:	69 f7       	brne	.-38     	; 0x2dbc <LCD_displayCharacter+0x5e6>
    2de2:	14 c0       	rjmp	.+40     	; 0x2e0c <LCD_displayCharacter+0x636>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de4:	6b a1       	ldd	r22, Y+35	; 0x23
    2de6:	7c a1       	ldd	r23, Y+36	; 0x24
    2de8:	8d a1       	ldd	r24, Y+37	; 0x25
    2dea:	9e a1       	ldd	r25, Y+38	; 0x26
    2dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	9a a3       	std	Y+34, r25	; 0x22
    2df6:	89 a3       	std	Y+33, r24	; 0x21
    2df8:	89 a1       	ldd	r24, Y+33	; 0x21
    2dfa:	9a a1       	ldd	r25, Y+34	; 0x22
    2dfc:	9e 8f       	std	Y+30, r25	; 0x1e
    2dfe:	8d 8f       	std	Y+29, r24	; 0x1d
    2e00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	f1 f7       	brne	.-4      	; 0x2e04 <LCD_displayCharacter+0x62e>
    2e08:	9e 8f       	std	Y+30, r25	; 0x1e
    2e0a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required data to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    2e0c:	82 e0       	ldi	r24, 0x02	; 2
    2e0e:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <GPIO_readPort>
    2e12:	fe 01       	movw	r30, r28
    2e14:	ed 59       	subi	r30, 0x9D	; 157
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((data & 0x0F) << 4);
    2e1a:	fe 01       	movw	r30, r28
    2e1c:	ed 59       	subi	r30, 0x9D	; 157
    2e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e20:	80 81       	ld	r24, Z
    2e22:	28 2f       	mov	r18, r24
    2e24:	2f 70       	andi	r18, 0x0F	; 15
    2e26:	fe 01       	movw	r30, r28
    2e28:	ec 59       	subi	r30, 0x9C	; 156
    2e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2c:	80 81       	ld	r24, Z
    2e2e:	88 2f       	mov	r24, r24
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	82 95       	swap	r24
    2e34:	92 95       	swap	r25
    2e36:	90 7f       	andi	r25, 0xF0	; 240
    2e38:	98 27       	eor	r25, r24
    2e3a:	80 7f       	andi	r24, 0xF0	; 240
    2e3c:	98 27       	eor	r25, r24
    2e3e:	82 2b       	or	r24, r18
    2e40:	fe 01       	movw	r30, r28
    2e42:	ed 59       	subi	r30, 0x9D	; 157
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	80 83       	st	Z, r24
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (data & 0x0F);
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    2e48:	fe 01       	movw	r30, r28
    2e4a:	ed 59       	subi	r30, 0x9D	; 157
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	82 e0       	ldi	r24, 0x02	; 2
    2e50:	60 81       	ld	r22, Z
    2e52:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <GPIO_writePort>
    2e56:	80 e0       	ldi	r24, 0x00	; 0
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	a0 e8       	ldi	r26, 0x80	; 128
    2e5c:	bf e3       	ldi	r27, 0x3F	; 63
    2e5e:	89 8f       	std	Y+25, r24	; 0x19
    2e60:	9a 8f       	std	Y+26, r25	; 0x1a
    2e62:	ab 8f       	std	Y+27, r26	; 0x1b
    2e64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e66:	69 8d       	ldd	r22, Y+25	; 0x19
    2e68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	4a e7       	ldi	r20, 0x7A	; 122
    2e74:	53 e4       	ldi	r21, 0x43	; 67
    2e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	8d 8b       	std	Y+21, r24	; 0x15
    2e80:	9e 8b       	std	Y+22, r25	; 0x16
    2e82:	af 8b       	std	Y+23, r26	; 0x17
    2e84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e86:	6d 89       	ldd	r22, Y+21	; 0x15
    2e88:	7e 89       	ldd	r23, Y+22	; 0x16
    2e8a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e8c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 e8       	ldi	r20, 0x80	; 128
    2e94:	5f e3       	ldi	r21, 0x3F	; 63
    2e96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e9a:	88 23       	and	r24, r24
    2e9c:	2c f4       	brge	.+10     	; 0x2ea8 <LCD_displayCharacter+0x6d2>
		__ticks = 1;
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	9c 8b       	std	Y+20, r25	; 0x14
    2ea4:	8b 8b       	std	Y+19, r24	; 0x13
    2ea6:	3f c0       	rjmp	.+126    	; 0x2f26 <LCD_displayCharacter+0x750>
	else if (__tmp > 65535)
    2ea8:	6d 89       	ldd	r22, Y+21	; 0x15
    2eaa:	7e 89       	ldd	r23, Y+22	; 0x16
    2eac:	8f 89       	ldd	r24, Y+23	; 0x17
    2eae:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	3f ef       	ldi	r19, 0xFF	; 255
    2eb4:	4f e7       	ldi	r20, 0x7F	; 127
    2eb6:	57 e4       	ldi	r21, 0x47	; 71
    2eb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ebc:	18 16       	cp	r1, r24
    2ebe:	4c f5       	brge	.+82     	; 0x2f12 <LCD_displayCharacter+0x73c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec0:	69 8d       	ldd	r22, Y+25	; 0x19
    2ec2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ec4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ec6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	40 e2       	ldi	r20, 0x20	; 32
    2ece:	51 e4       	ldi	r21, 0x41	; 65
    2ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	bc 01       	movw	r22, r24
    2eda:	cd 01       	movw	r24, r26
    2edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	9c 8b       	std	Y+20, r25	; 0x14
    2ee6:	8b 8b       	std	Y+19, r24	; 0x13
    2ee8:	0f c0       	rjmp	.+30     	; 0x2f08 <LCD_displayCharacter+0x732>
    2eea:	89 e1       	ldi	r24, 0x19	; 25
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	9a 8b       	std	Y+18, r25	; 0x12
    2ef0:	89 8b       	std	Y+17, r24	; 0x11
    2ef2:	89 89       	ldd	r24, Y+17	; 0x11
    2ef4:	9a 89       	ldd	r25, Y+18	; 0x12
    2ef6:	01 97       	sbiw	r24, 0x01	; 1
    2ef8:	f1 f7       	brne	.-4      	; 0x2ef6 <LCD_displayCharacter+0x720>
    2efa:	9a 8b       	std	Y+18, r25	; 0x12
    2efc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2efe:	8b 89       	ldd	r24, Y+19	; 0x13
    2f00:	9c 89       	ldd	r25, Y+20	; 0x14
    2f02:	01 97       	sbiw	r24, 0x01	; 1
    2f04:	9c 8b       	std	Y+20, r25	; 0x14
    2f06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f08:	8b 89       	ldd	r24, Y+19	; 0x13
    2f0a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f0c:	00 97       	sbiw	r24, 0x00	; 0
    2f0e:	69 f7       	brne	.-38     	; 0x2eea <LCD_displayCharacter+0x714>
    2f10:	14 c0       	rjmp	.+40     	; 0x2f3a <LCD_displayCharacter+0x764>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f12:	6d 89       	ldd	r22, Y+21	; 0x15
    2f14:	7e 89       	ldd	r23, Y+22	; 0x16
    2f16:	8f 89       	ldd	r24, Y+23	; 0x17
    2f18:	98 8d       	ldd	r25, Y+24	; 0x18
    2f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	9c 8b       	std	Y+20, r25	; 0x14
    2f24:	8b 8b       	std	Y+19, r24	; 0x13
    2f26:	8b 89       	ldd	r24, Y+19	; 0x13
    2f28:	9c 89       	ldd	r25, Y+20	; 0x14
    2f2a:	98 8b       	std	Y+16, r25	; 0x10
    2f2c:	8f 87       	std	Y+15, r24	; 0x0f
    2f2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f30:	98 89       	ldd	r25, Y+16	; 0x10
    2f32:	01 97       	sbiw	r24, 0x01	; 1
    2f34:	f1 f7       	brne	.-4      	; 0x2f32 <LCD_displayCharacter+0x75c>
    2f36:	98 8b       	std	Y+16, r25	; 0x10
    2f38:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2f3a:	83 e0       	ldi	r24, 0x03	; 3
    2f3c:	66 e0       	ldi	r22, 0x06	; 6
    2f3e:	40 e0       	ldi	r20, 0x00	; 0
    2f40:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_writePin>
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	a0 e8       	ldi	r26, 0x80	; 128
    2f4a:	bf e3       	ldi	r27, 0x3F	; 63
    2f4c:	8b 87       	std	Y+11, r24	; 0x0b
    2f4e:	9c 87       	std	Y+12, r25	; 0x0c
    2f50:	ad 87       	std	Y+13, r26	; 0x0d
    2f52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	4a e7       	ldi	r20, 0x7A	; 122
    2f62:	53 e4       	ldi	r21, 0x43	; 67
    2f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	8f 83       	std	Y+7, r24	; 0x07
    2f6e:	98 87       	std	Y+8, r25	; 0x08
    2f70:	a9 87       	std	Y+9, r26	; 0x09
    2f72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f74:	6f 81       	ldd	r22, Y+7	; 0x07
    2f76:	78 85       	ldd	r23, Y+8	; 0x08
    2f78:	89 85       	ldd	r24, Y+9	; 0x09
    2f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	40 e8       	ldi	r20, 0x80	; 128
    2f82:	5f e3       	ldi	r21, 0x3F	; 63
    2f84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f88:	88 23       	and	r24, r24
    2f8a:	2c f4       	brge	.+10     	; 0x2f96 <LCD_displayCharacter+0x7c0>
		__ticks = 1;
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	9e 83       	std	Y+6, r25	; 0x06
    2f92:	8d 83       	std	Y+5, r24	; 0x05
    2f94:	3f c0       	rjmp	.+126    	; 0x3014 <LCD_displayCharacter+0x83e>
	else if (__tmp > 65535)
    2f96:	6f 81       	ldd	r22, Y+7	; 0x07
    2f98:	78 85       	ldd	r23, Y+8	; 0x08
    2f9a:	89 85       	ldd	r24, Y+9	; 0x09
    2f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	3f ef       	ldi	r19, 0xFF	; 255
    2fa2:	4f e7       	ldi	r20, 0x7F	; 127
    2fa4:	57 e4       	ldi	r21, 0x47	; 71
    2fa6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2faa:	18 16       	cp	r1, r24
    2fac:	4c f5       	brge	.+82     	; 0x3000 <LCD_displayCharacter+0x82a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	40 e2       	ldi	r20, 0x20	; 32
    2fbc:	51 e4       	ldi	r21, 0x41	; 65
    2fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	bc 01       	movw	r22, r24
    2fc8:	cd 01       	movw	r24, r26
    2fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	9e 83       	std	Y+6, r25	; 0x06
    2fd4:	8d 83       	std	Y+5, r24	; 0x05
    2fd6:	0f c0       	rjmp	.+30     	; 0x2ff6 <LCD_displayCharacter+0x820>
    2fd8:	89 e1       	ldi	r24, 0x19	; 25
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	9c 83       	std	Y+4, r25	; 0x04
    2fde:	8b 83       	std	Y+3, r24	; 0x03
    2fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	f1 f7       	brne	.-4      	; 0x2fe4 <LCD_displayCharacter+0x80e>
    2fe8:	9c 83       	std	Y+4, r25	; 0x04
    2fea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fec:	8d 81       	ldd	r24, Y+5	; 0x05
    2fee:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff0:	01 97       	sbiw	r24, 0x01	; 1
    2ff2:	9e 83       	std	Y+6, r25	; 0x06
    2ff4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffa:	00 97       	sbiw	r24, 0x00	; 0
    2ffc:	69 f7       	brne	.-38     	; 0x2fd8 <LCD_displayCharacter+0x802>
    2ffe:	14 c0       	rjmp	.+40     	; 0x3028 <LCD_displayCharacter+0x852>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3000:	6f 81       	ldd	r22, Y+7	; 0x07
    3002:	78 85       	ldd	r23, Y+8	; 0x08
    3004:	89 85       	ldd	r24, Y+9	; 0x09
    3006:	9a 85       	ldd	r25, Y+10	; 0x0a
    3008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	9e 83       	std	Y+6, r25	; 0x06
    3012:	8d 83       	std	Y+5, r24	; 0x05
    3014:	8d 81       	ldd	r24, Y+5	; 0x05
    3016:	9e 81       	ldd	r25, Y+6	; 0x06
    3018:	9a 83       	std	Y+2, r25	; 0x02
    301a:	89 83       	std	Y+1, r24	; 0x01
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	9a 81       	ldd	r25, Y+2	; 0x02
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	f1 f7       	brne	.-4      	; 0x3020 <LCD_displayCharacter+0x84a>
    3024:	9a 83       	std	Y+2, r25	; 0x02
    3026:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3028:	cc 59       	subi	r28, 0x9C	; 156
    302a:	df 4f       	sbci	r29, 0xFF	; 255
    302c:	0f b6       	in	r0, 0x3f	; 63
    302e:	f8 94       	cli
    3030:	de bf       	out	0x3e, r29	; 62
    3032:	0f be       	out	0x3f, r0	; 63
    3034:	cd bf       	out	0x3d, r28	; 61
    3036:	cf 91       	pop	r28
    3038:	df 91       	pop	r29
    303a:	1f 91       	pop	r17
    303c:	0f 91       	pop	r16
    303e:	08 95       	ret

00003040 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3040:	df 93       	push	r29
    3042:	cf 93       	push	r28
    3044:	00 d0       	rcall	.+0      	; 0x3046 <LCD_displayString+0x6>
    3046:	0f 92       	push	r0
    3048:	cd b7       	in	r28, 0x3d	; 61
    304a:	de b7       	in	r29, 0x3e	; 62
    304c:	9b 83       	std	Y+3, r25	; 0x03
    304e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3050:	19 82       	std	Y+1, r1	; 0x01
    3052:	0e c0       	rjmp	.+28     	; 0x3070 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3054:	89 81       	ldd	r24, Y+1	; 0x01
    3056:	28 2f       	mov	r18, r24
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	8a 81       	ldd	r24, Y+2	; 0x02
    305c:	9b 81       	ldd	r25, Y+3	; 0x03
    305e:	fc 01       	movw	r30, r24
    3060:	e2 0f       	add	r30, r18
    3062:	f3 1f       	adc	r31, r19
    3064:	80 81       	ld	r24, Z
    3066:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_displayCharacter>
		i++;
    306a:	89 81       	ldd	r24, Y+1	; 0x01
    306c:	8f 5f       	subi	r24, 0xFF	; 255
    306e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3070:	89 81       	ldd	r24, Y+1	; 0x01
    3072:	28 2f       	mov	r18, r24
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	8a 81       	ldd	r24, Y+2	; 0x02
    3078:	9b 81       	ldd	r25, Y+3	; 0x03
    307a:	fc 01       	movw	r30, r24
    307c:	e2 0f       	add	r30, r18
    307e:	f3 1f       	adc	r31, r19
    3080:	80 81       	ld	r24, Z
    3082:	88 23       	and	r24, r24
    3084:	39 f7       	brne	.-50     	; 0x3054 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    3086:	0f 90       	pop	r0
    3088:	0f 90       	pop	r0
    308a:	0f 90       	pop	r0
    308c:	cf 91       	pop	r28
    308e:	df 91       	pop	r29
    3090:	08 95       	ret

00003092 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3092:	df 93       	push	r29
    3094:	cf 93       	push	r28
    3096:	00 d0       	rcall	.+0      	; 0x3098 <LCD_moveCursor+0x6>
    3098:	00 d0       	rcall	.+0      	; 0x309a <LCD_moveCursor+0x8>
    309a:	0f 92       	push	r0
    309c:	cd b7       	in	r28, 0x3d	; 61
    309e:	de b7       	in	r29, 0x3e	; 62
    30a0:	8a 83       	std	Y+2, r24	; 0x02
    30a2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    30a4:	8a 81       	ldd	r24, Y+2	; 0x02
    30a6:	28 2f       	mov	r18, r24
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	3d 83       	std	Y+5, r19	; 0x05
    30ac:	2c 83       	std	Y+4, r18	; 0x04
    30ae:	8c 81       	ldd	r24, Y+4	; 0x04
    30b0:	9d 81       	ldd	r25, Y+5	; 0x05
    30b2:	81 30       	cpi	r24, 0x01	; 1
    30b4:	91 05       	cpc	r25, r1
    30b6:	c1 f0       	breq	.+48     	; 0x30e8 <LCD_moveCursor+0x56>
    30b8:	2c 81       	ldd	r18, Y+4	; 0x04
    30ba:	3d 81       	ldd	r19, Y+5	; 0x05
    30bc:	22 30       	cpi	r18, 0x02	; 2
    30be:	31 05       	cpc	r19, r1
    30c0:	2c f4       	brge	.+10     	; 0x30cc <LCD_moveCursor+0x3a>
    30c2:	8c 81       	ldd	r24, Y+4	; 0x04
    30c4:	9d 81       	ldd	r25, Y+5	; 0x05
    30c6:	00 97       	sbiw	r24, 0x00	; 0
    30c8:	61 f0       	breq	.+24     	; 0x30e2 <LCD_moveCursor+0x50>
    30ca:	19 c0       	rjmp	.+50     	; 0x30fe <LCD_moveCursor+0x6c>
    30cc:	2c 81       	ldd	r18, Y+4	; 0x04
    30ce:	3d 81       	ldd	r19, Y+5	; 0x05
    30d0:	22 30       	cpi	r18, 0x02	; 2
    30d2:	31 05       	cpc	r19, r1
    30d4:	69 f0       	breq	.+26     	; 0x30f0 <LCD_moveCursor+0x5e>
    30d6:	8c 81       	ldd	r24, Y+4	; 0x04
    30d8:	9d 81       	ldd	r25, Y+5	; 0x05
    30da:	83 30       	cpi	r24, 0x03	; 3
    30dc:	91 05       	cpc	r25, r1
    30de:	61 f0       	breq	.+24     	; 0x30f8 <LCD_moveCursor+0x66>
    30e0:	0e c0       	rjmp	.+28     	; 0x30fe <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    30e2:	8b 81       	ldd	r24, Y+3	; 0x03
    30e4:	89 83       	std	Y+1, r24	; 0x01
    30e6:	0b c0       	rjmp	.+22     	; 0x30fe <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    30e8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ea:	80 5c       	subi	r24, 0xC0	; 192
    30ec:	89 83       	std	Y+1, r24	; 0x01
    30ee:	07 c0       	rjmp	.+14     	; 0x30fe <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    30f0:	8b 81       	ldd	r24, Y+3	; 0x03
    30f2:	80 5f       	subi	r24, 0xF0	; 240
    30f4:	89 83       	std	Y+1, r24	; 0x01
    30f6:	03 c0       	rjmp	.+6      	; 0x30fe <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    30f8:	8b 81       	ldd	r24, Y+3	; 0x03
    30fa:	80 5b       	subi	r24, 0xB0	; 176
    30fc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
    3100:	80 68       	ori	r24, 0x80	; 128
    3102:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_sendCommand>
}
    3106:	0f 90       	pop	r0
    3108:	0f 90       	pop	r0
    310a:	0f 90       	pop	r0
    310c:	0f 90       	pop	r0
    310e:	0f 90       	pop	r0
    3110:	cf 91       	pop	r28
    3112:	df 91       	pop	r29
    3114:	08 95       	ret

00003116 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3116:	df 93       	push	r29
    3118:	cf 93       	push	r28
    311a:	00 d0       	rcall	.+0      	; 0x311c <LCD_displayStringRowColumn+0x6>
    311c:	00 d0       	rcall	.+0      	; 0x311e <LCD_displayStringRowColumn+0x8>
    311e:	cd b7       	in	r28, 0x3d	; 61
    3120:	de b7       	in	r29, 0x3e	; 62
    3122:	89 83       	std	Y+1, r24	; 0x01
    3124:	6a 83       	std	Y+2, r22	; 0x02
    3126:	5c 83       	std	Y+4, r21	; 0x04
    3128:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    312a:	89 81       	ldd	r24, Y+1	; 0x01
    312c:	6a 81       	ldd	r22, Y+2	; 0x02
    312e:	0e 94 49 18 	call	0x3092	; 0x3092 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3132:	8b 81       	ldd	r24, Y+3	; 0x03
    3134:	9c 81       	ldd	r25, Y+4	; 0x04
    3136:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
}
    313a:	0f 90       	pop	r0
    313c:	0f 90       	pop	r0
    313e:	0f 90       	pop	r0
    3140:	0f 90       	pop	r0
    3142:	cf 91       	pop	r28
    3144:	df 91       	pop	r29
    3146:	08 95       	ret

00003148 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3148:	df 93       	push	r29
    314a:	cf 93       	push	r28
    314c:	cd b7       	in	r28, 0x3d	; 61
    314e:	de b7       	in	r29, 0x3e	; 62
    3150:	62 97       	sbiw	r28, 0x12	; 18
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	f8 94       	cli
    3156:	de bf       	out	0x3e, r29	; 62
    3158:	0f be       	out	0x3f, r0	; 63
    315a:	cd bf       	out	0x3d, r28	; 61
    315c:	9a 8b       	std	Y+18, r25	; 0x12
    315e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3160:	89 89       	ldd	r24, Y+17	; 0x11
    3162:	9a 89       	ldd	r25, Y+18	; 0x12
    3164:	9e 01       	movw	r18, r28
    3166:	2f 5f       	subi	r18, 0xFF	; 255
    3168:	3f 4f       	sbci	r19, 0xFF	; 255
    316a:	b9 01       	movw	r22, r18
    316c:	4a e0       	ldi	r20, 0x0A	; 10
    316e:	50 e0       	ldi	r21, 0x00	; 0
    3170:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <itoa>
   LCD_displayString(buff); /* Display the string */
    3174:	ce 01       	movw	r24, r28
    3176:	01 96       	adiw	r24, 0x01	; 1
    3178:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
}
    317c:	62 96       	adiw	r28, 0x12	; 18
    317e:	0f b6       	in	r0, 0x3f	; 63
    3180:	f8 94       	cli
    3182:	de bf       	out	0x3e, r29	; 62
    3184:	0f be       	out	0x3f, r0	; 63
    3186:	cd bf       	out	0x3d, r28	; 61
    3188:	cf 91       	pop	r28
    318a:	df 91       	pop	r29
    318c:	08 95       	ret

0000318e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    318e:	df 93       	push	r29
    3190:	cf 93       	push	r28
    3192:	cd b7       	in	r28, 0x3d	; 61
    3194:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_sendCommand>
}
    319c:	cf 91       	pop	r28
    319e:	df 91       	pop	r29
    31a0:	08 95       	ret

000031a2 <__vector_9>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

#ifdef TIMER_0_NORMAL_MODE

ISR(TIMER0_OVF_vect){
    31a2:	1f 92       	push	r1
    31a4:	0f 92       	push	r0
    31a6:	0f b6       	in	r0, 0x3f	; 63
    31a8:	0f 92       	push	r0
    31aa:	11 24       	eor	r1, r1
    31ac:	2f 93       	push	r18
    31ae:	3f 93       	push	r19
    31b0:	4f 93       	push	r20
    31b2:	5f 93       	push	r21
    31b4:	6f 93       	push	r22
    31b6:	7f 93       	push	r23
    31b8:	8f 93       	push	r24
    31ba:	9f 93       	push	r25
    31bc:	af 93       	push	r26
    31be:	bf 93       	push	r27
    31c0:	ef 93       	push	r30
    31c2:	ff 93       	push	r31
    31c4:	df 93       	push	r29
    31c6:	cf 93       	push	r28
    31c8:	cd b7       	in	r28, 0x3d	; 61
    31ca:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPointer != NULL_PTR){
    31cc:	80 91 7b 01 	lds	r24, 0x017B
    31d0:	90 91 7c 01 	lds	r25, 0x017C
    31d4:	00 97       	sbiw	r24, 0x00	; 0
    31d6:	29 f0       	breq	.+10     	; 0x31e2 <__vector_9+0x40>
		(*g_callBackPointer)() ;
    31d8:	e0 91 7b 01 	lds	r30, 0x017B
    31dc:	f0 91 7c 01 	lds	r31, 0x017C
    31e0:	09 95       	icall

	}

}
    31e2:	cf 91       	pop	r28
    31e4:	df 91       	pop	r29
    31e6:	ff 91       	pop	r31
    31e8:	ef 91       	pop	r30
    31ea:	bf 91       	pop	r27
    31ec:	af 91       	pop	r26
    31ee:	9f 91       	pop	r25
    31f0:	8f 91       	pop	r24
    31f2:	7f 91       	pop	r23
    31f4:	6f 91       	pop	r22
    31f6:	5f 91       	pop	r21
    31f8:	4f 91       	pop	r20
    31fa:	3f 91       	pop	r19
    31fc:	2f 91       	pop	r18
    31fe:	0f 90       	pop	r0
    3200:	0f be       	out	0x3f, r0	; 63
    3202:	0f 90       	pop	r0
    3204:	1f 90       	pop	r1
    3206:	18 95       	reti

00003208 <Timer0_Init_Normal_Mode>:
 */


#ifdef TIMER_0_NORMAL_MODE

void Timer0_Init_Normal_Mode (){
    3208:	df 93       	push	r29
    320a:	cf 93       	push	r28
    320c:	cd b7       	in	r28, 0x3d	; 61
    320e:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0 ; //Set Timer initial value to 0
    3210:	e2 e5       	ldi	r30, 0x52	; 82
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	10 82       	st	Z, r1
	TIMSK |=(1<<TOIE0) ; // Enable Timer0 Overflow Interrupt
    3216:	a9 e5       	ldi	r26, 0x59	; 89
    3218:	b0 e0       	ldi	r27, 0x00	; 0
    321a:	e9 e5       	ldi	r30, 0x59	; 89
    321c:	f0 e0       	ldi	r31, 0x00	; 0
    321e:	80 81       	ld	r24, Z
    3220:	81 60       	ori	r24, 0x01	; 1
    3222:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0 = (1<<FOC0) | (1<<CS00) | (1<<CS02) ;
    3224:	e3 e5       	ldi	r30, 0x53	; 83
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	85 e8       	ldi	r24, 0x85	; 133
    322a:	80 83       	st	Z, r24
}
    322c:	cf 91       	pop	r28
    322e:	df 91       	pop	r29
    3230:	08 95       	ret

00003232 <Timer0_DeInit>:

/*
 * Description: Function to stop the Timer.
 */

void Timer0_DeInit (){
    3232:	df 93       	push	r29
    3234:	cf 93       	push	r28
    3236:	cd b7       	in	r28, 0x3d	; 61
    3238:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &=(~(1<<CS00)) ;
    323a:	a3 e5       	ldi	r26, 0x53	; 83
    323c:	b0 e0       	ldi	r27, 0x00	; 0
    323e:	e3 e5       	ldi	r30, 0x53	; 83
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	80 81       	ld	r24, Z
    3244:	8e 7f       	andi	r24, 0xFE	; 254
    3246:	8c 93       	st	X, r24
	TCCR0 &=(~(1<<CS01)) ;
    3248:	a3 e5       	ldi	r26, 0x53	; 83
    324a:	b0 e0       	ldi	r27, 0x00	; 0
    324c:	e3 e5       	ldi	r30, 0x53	; 83
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	80 81       	ld	r24, Z
    3252:	8d 7f       	andi	r24, 0xFD	; 253
    3254:	8c 93       	st	X, r24
	TCCR0 &=(~(1<<CS02)) ;
    3256:	a3 e5       	ldi	r26, 0x53	; 83
    3258:	b0 e0       	ldi	r27, 0x00	; 0
    325a:	e3 e5       	ldi	r30, 0x53	; 83
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	80 81       	ld	r24, Z
    3260:	8b 7f       	andi	r24, 0xFB	; 251
    3262:	8c 93       	st	X, r24
}
    3264:	cf 91       	pop	r28
    3266:	df 91       	pop	r29
    3268:	08 95       	ret

0000326a <Timer_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */


void Timer_setCallBack(void(*a_ptr)(void)){
    326a:	df 93       	push	r29
    326c:	cf 93       	push	r28
    326e:	00 d0       	rcall	.+0      	; 0x3270 <Timer_setCallBack+0x6>
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
    3274:	9a 83       	std	Y+2, r25	; 0x02
    3276:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPointer = a_ptr ;
    3278:	89 81       	ldd	r24, Y+1	; 0x01
    327a:	9a 81       	ldd	r25, Y+2	; 0x02
    327c:	90 93 7c 01 	sts	0x017C, r25
    3280:	80 93 7b 01 	sts	0x017B, r24
}
    3284:	0f 90       	pop	r0
    3286:	0f 90       	pop	r0
    3288:	cf 91       	pop	r28
    328a:	df 91       	pop	r29
    328c:	08 95       	ret

0000328e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    328e:	df 93       	push	r29
    3290:	cf 93       	push	r28
    3292:	00 d0       	rcall	.+0      	; 0x3294 <UART_init+0x6>
    3294:	00 d0       	rcall	.+0      	; 0x3296 <UART_init+0x8>
    3296:	00 d0       	rcall	.+0      	; 0x3298 <UART_init+0xa>
    3298:	cd b7       	in	r28, 0x3d	; 61
    329a:	de b7       	in	r29, 0x3e	; 62
    329c:	6b 83       	std	Y+3, r22	; 0x03
    329e:	7c 83       	std	Y+4, r23	; 0x04
    32a0:	8d 83       	std	Y+5, r24	; 0x05
    32a2:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    32a4:	1a 82       	std	Y+2, r1	; 0x02
    32a6:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    32a8:	eb e2       	ldi	r30, 0x2B	; 43
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	82 e0       	ldi	r24, 0x02	; 2
    32ae:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    32b0:	ea e2       	ldi	r30, 0x2A	; 42
    32b2:	f0 e0       	ldi	r31, 0x00	; 0
    32b4:	88 e1       	ldi	r24, 0x18	; 24
    32b6:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    32b8:	e0 e4       	ldi	r30, 0x40	; 64
    32ba:	f0 e0       	ldi	r31, 0x00	; 0
    32bc:	86 e8       	ldi	r24, 0x86	; 134
    32be:	80 83       	st	Z, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    32c0:	8b 81       	ldd	r24, Y+3	; 0x03
    32c2:	9c 81       	ldd	r25, Y+4	; 0x04
    32c4:	ad 81       	ldd	r26, Y+5	; 0x05
    32c6:	be 81       	ldd	r27, Y+6	; 0x06
    32c8:	88 0f       	add	r24, r24
    32ca:	99 1f       	adc	r25, r25
    32cc:	aa 1f       	adc	r26, r26
    32ce:	bb 1f       	adc	r27, r27
    32d0:	88 0f       	add	r24, r24
    32d2:	99 1f       	adc	r25, r25
    32d4:	aa 1f       	adc	r26, r26
    32d6:	bb 1f       	adc	r27, r27
    32d8:	88 0f       	add	r24, r24
    32da:	99 1f       	adc	r25, r25
    32dc:	aa 1f       	adc	r26, r26
    32de:	bb 1f       	adc	r27, r27
    32e0:	9c 01       	movw	r18, r24
    32e2:	ad 01       	movw	r20, r26
    32e4:	80 e4       	ldi	r24, 0x40	; 64
    32e6:	92 e4       	ldi	r25, 0x42	; 66
    32e8:	af e0       	ldi	r26, 0x0F	; 15
    32ea:	b0 e0       	ldi	r27, 0x00	; 0
    32ec:	bc 01       	movw	r22, r24
    32ee:	cd 01       	movw	r24, r26
    32f0:	0e 94 25 1a 	call	0x344a	; 0x344a <__udivmodsi4>
    32f4:	da 01       	movw	r26, r20
    32f6:	c9 01       	movw	r24, r18
    32f8:	01 97       	sbiw	r24, 0x01	; 1
    32fa:	9a 83       	std	Y+2, r25	; 0x02
    32fc:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    32fe:	e0 e4       	ldi	r30, 0x40	; 64
    3300:	f0 e0       	ldi	r31, 0x00	; 0
    3302:	89 81       	ldd	r24, Y+1	; 0x01
    3304:	9a 81       	ldd	r25, Y+2	; 0x02
    3306:	89 2f       	mov	r24, r25
    3308:	99 27       	eor	r25, r25
    330a:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    330c:	e9 e2       	ldi	r30, 0x29	; 41
    330e:	f0 e0       	ldi	r31, 0x00	; 0
    3310:	89 81       	ldd	r24, Y+1	; 0x01
    3312:	80 83       	st	Z, r24
}
    3314:	26 96       	adiw	r28, 0x06	; 6
    3316:	0f b6       	in	r0, 0x3f	; 63
    3318:	f8 94       	cli
    331a:	de bf       	out	0x3e, r29	; 62
    331c:	0f be       	out	0x3f, r0	; 63
    331e:	cd bf       	out	0x3d, r28	; 61
    3320:	cf 91       	pop	r28
    3322:	df 91       	pop	r29
    3324:	08 95       	ret

00003326 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3326:	df 93       	push	r29
    3328:	cf 93       	push	r28
    332a:	0f 92       	push	r0
    332c:	cd b7       	in	r28, 0x3d	; 61
    332e:	de b7       	in	r29, 0x3e	; 62
    3330:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3332:	eb e2       	ldi	r30, 0x2B	; 43
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	80 81       	ld	r24, Z
    3338:	88 2f       	mov	r24, r24
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	80 72       	andi	r24, 0x20	; 32
    333e:	90 70       	andi	r25, 0x00	; 0
    3340:	00 97       	sbiw	r24, 0x00	; 0
    3342:	b9 f3       	breq	.-18     	; 0x3332 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3344:	ec e2       	ldi	r30, 0x2C	; 44
    3346:	f0 e0       	ldi	r31, 0x00	; 0
    3348:	89 81       	ldd	r24, Y+1	; 0x01
    334a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    334c:	0f 90       	pop	r0
    334e:	cf 91       	pop	r28
    3350:	df 91       	pop	r29
    3352:	08 95       	ret

00003354 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3354:	df 93       	push	r29
    3356:	cf 93       	push	r28
    3358:	cd b7       	in	r28, 0x3d	; 61
    335a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    335c:	eb e2       	ldi	r30, 0x2B	; 43
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	80 81       	ld	r24, Z
    3362:	88 23       	and	r24, r24
    3364:	dc f7       	brge	.-10     	; 0x335c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    3366:	ec e2       	ldi	r30, 0x2C	; 44
    3368:	f0 e0       	ldi	r31, 0x00	; 0
    336a:	80 81       	ld	r24, Z
}
    336c:	cf 91       	pop	r28
    336e:	df 91       	pop	r29
    3370:	08 95       	ret

00003372 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3372:	df 93       	push	r29
    3374:	cf 93       	push	r28
    3376:	00 d0       	rcall	.+0      	; 0x3378 <UART_sendString+0x6>
    3378:	0f 92       	push	r0
    337a:	cd b7       	in	r28, 0x3d	; 61
    337c:	de b7       	in	r29, 0x3e	; 62
    337e:	9b 83       	std	Y+3, r25	; 0x03
    3380:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3382:	19 82       	std	Y+1, r1	; 0x01
    3384:	0e c0       	rjmp	.+28     	; 0x33a2 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3386:	89 81       	ldd	r24, Y+1	; 0x01
    3388:	28 2f       	mov	r18, r24
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	8a 81       	ldd	r24, Y+2	; 0x02
    338e:	9b 81       	ldd	r25, Y+3	; 0x03
    3390:	fc 01       	movw	r30, r24
    3392:	e2 0f       	add	r30, r18
    3394:	f3 1f       	adc	r31, r19
    3396:	80 81       	ld	r24, Z
    3398:	0e 94 93 19 	call	0x3326	; 0x3326 <UART_sendByte>
		i++;
    339c:	89 81       	ldd	r24, Y+1	; 0x01
    339e:	8f 5f       	subi	r24, 0xFF	; 255
    33a0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    33a2:	89 81       	ldd	r24, Y+1	; 0x01
    33a4:	28 2f       	mov	r18, r24
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	8a 81       	ldd	r24, Y+2	; 0x02
    33aa:	9b 81       	ldd	r25, Y+3	; 0x03
    33ac:	fc 01       	movw	r30, r24
    33ae:	e2 0f       	add	r30, r18
    33b0:	f3 1f       	adc	r31, r19
    33b2:	80 81       	ld	r24, Z
    33b4:	88 23       	and	r24, r24
    33b6:	39 f7       	brne	.-50     	; 0x3386 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    33b8:	0f 90       	pop	r0
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	cf 91       	pop	r28
    33c0:	df 91       	pop	r29
    33c2:	08 95       	ret

000033c4 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    33c4:	0f 93       	push	r16
    33c6:	1f 93       	push	r17
    33c8:	df 93       	push	r29
    33ca:	cf 93       	push	r28
    33cc:	00 d0       	rcall	.+0      	; 0x33ce <UART_receiveString+0xa>
    33ce:	0f 92       	push	r0
    33d0:	cd b7       	in	r28, 0x3d	; 61
    33d2:	de b7       	in	r29, 0x3e	; 62
    33d4:	9b 83       	std	Y+3, r25	; 0x03
    33d6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    33d8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    33da:	89 81       	ldd	r24, Y+1	; 0x01
    33dc:	28 2f       	mov	r18, r24
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	8a 81       	ldd	r24, Y+2	; 0x02
    33e2:	9b 81       	ldd	r25, Y+3	; 0x03
    33e4:	8c 01       	movw	r16, r24
    33e6:	02 0f       	add	r16, r18
    33e8:	13 1f       	adc	r17, r19
    33ea:	0e 94 aa 19 	call	0x3354	; 0x3354 <UART_recieveByte>
    33ee:	f8 01       	movw	r30, r16
    33f0:	80 83       	st	Z, r24
    33f2:	0f c0       	rjmp	.+30     	; 0x3412 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    33f4:	89 81       	ldd	r24, Y+1	; 0x01
    33f6:	8f 5f       	subi	r24, 0xFF	; 255
    33f8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    33fa:	89 81       	ldd	r24, Y+1	; 0x01
    33fc:	28 2f       	mov	r18, r24
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	8a 81       	ldd	r24, Y+2	; 0x02
    3402:	9b 81       	ldd	r25, Y+3	; 0x03
    3404:	8c 01       	movw	r16, r24
    3406:	02 0f       	add	r16, r18
    3408:	13 1f       	adc	r17, r19
    340a:	0e 94 aa 19 	call	0x3354	; 0x3354 <UART_recieveByte>
    340e:	f8 01       	movw	r30, r16
    3410:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3412:	89 81       	ldd	r24, Y+1	; 0x01
    3414:	28 2f       	mov	r18, r24
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	8a 81       	ldd	r24, Y+2	; 0x02
    341a:	9b 81       	ldd	r25, Y+3	; 0x03
    341c:	fc 01       	movw	r30, r24
    341e:	e2 0f       	add	r30, r18
    3420:	f3 1f       	adc	r31, r19
    3422:	80 81       	ld	r24, Z
    3424:	83 32       	cpi	r24, 0x23	; 35
    3426:	31 f7       	brne	.-52     	; 0x33f4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3428:	89 81       	ldd	r24, Y+1	; 0x01
    342a:	28 2f       	mov	r18, r24
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	8a 81       	ldd	r24, Y+2	; 0x02
    3430:	9b 81       	ldd	r25, Y+3	; 0x03
    3432:	fc 01       	movw	r30, r24
    3434:	e2 0f       	add	r30, r18
    3436:	f3 1f       	adc	r31, r19
    3438:	10 82       	st	Z, r1
}
    343a:	0f 90       	pop	r0
    343c:	0f 90       	pop	r0
    343e:	0f 90       	pop	r0
    3440:	cf 91       	pop	r28
    3442:	df 91       	pop	r29
    3444:	1f 91       	pop	r17
    3446:	0f 91       	pop	r16
    3448:	08 95       	ret

0000344a <__udivmodsi4>:
    344a:	a1 e2       	ldi	r26, 0x21	; 33
    344c:	1a 2e       	mov	r1, r26
    344e:	aa 1b       	sub	r26, r26
    3450:	bb 1b       	sub	r27, r27
    3452:	fd 01       	movw	r30, r26
    3454:	0d c0       	rjmp	.+26     	; 0x3470 <__udivmodsi4_ep>

00003456 <__udivmodsi4_loop>:
    3456:	aa 1f       	adc	r26, r26
    3458:	bb 1f       	adc	r27, r27
    345a:	ee 1f       	adc	r30, r30
    345c:	ff 1f       	adc	r31, r31
    345e:	a2 17       	cp	r26, r18
    3460:	b3 07       	cpc	r27, r19
    3462:	e4 07       	cpc	r30, r20
    3464:	f5 07       	cpc	r31, r21
    3466:	20 f0       	brcs	.+8      	; 0x3470 <__udivmodsi4_ep>
    3468:	a2 1b       	sub	r26, r18
    346a:	b3 0b       	sbc	r27, r19
    346c:	e4 0b       	sbc	r30, r20
    346e:	f5 0b       	sbc	r31, r21

00003470 <__udivmodsi4_ep>:
    3470:	66 1f       	adc	r22, r22
    3472:	77 1f       	adc	r23, r23
    3474:	88 1f       	adc	r24, r24
    3476:	99 1f       	adc	r25, r25
    3478:	1a 94       	dec	r1
    347a:	69 f7       	brne	.-38     	; 0x3456 <__udivmodsi4_loop>
    347c:	60 95       	com	r22
    347e:	70 95       	com	r23
    3480:	80 95       	com	r24
    3482:	90 95       	com	r25
    3484:	9b 01       	movw	r18, r22
    3486:	ac 01       	movw	r20, r24
    3488:	bd 01       	movw	r22, r26
    348a:	cf 01       	movw	r24, r30
    348c:	08 95       	ret

0000348e <__prologue_saves__>:
    348e:	2f 92       	push	r2
    3490:	3f 92       	push	r3
    3492:	4f 92       	push	r4
    3494:	5f 92       	push	r5
    3496:	6f 92       	push	r6
    3498:	7f 92       	push	r7
    349a:	8f 92       	push	r8
    349c:	9f 92       	push	r9
    349e:	af 92       	push	r10
    34a0:	bf 92       	push	r11
    34a2:	cf 92       	push	r12
    34a4:	df 92       	push	r13
    34a6:	ef 92       	push	r14
    34a8:	ff 92       	push	r15
    34aa:	0f 93       	push	r16
    34ac:	1f 93       	push	r17
    34ae:	cf 93       	push	r28
    34b0:	df 93       	push	r29
    34b2:	cd b7       	in	r28, 0x3d	; 61
    34b4:	de b7       	in	r29, 0x3e	; 62
    34b6:	ca 1b       	sub	r28, r26
    34b8:	db 0b       	sbc	r29, r27
    34ba:	0f b6       	in	r0, 0x3f	; 63
    34bc:	f8 94       	cli
    34be:	de bf       	out	0x3e, r29	; 62
    34c0:	0f be       	out	0x3f, r0	; 63
    34c2:	cd bf       	out	0x3d, r28	; 61
    34c4:	09 94       	ijmp

000034c6 <__epilogue_restores__>:
    34c6:	2a 88       	ldd	r2, Y+18	; 0x12
    34c8:	39 88       	ldd	r3, Y+17	; 0x11
    34ca:	48 88       	ldd	r4, Y+16	; 0x10
    34cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    34ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    34d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    34d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    34d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    34d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    34d8:	b9 84       	ldd	r11, Y+9	; 0x09
    34da:	c8 84       	ldd	r12, Y+8	; 0x08
    34dc:	df 80       	ldd	r13, Y+7	; 0x07
    34de:	ee 80       	ldd	r14, Y+6	; 0x06
    34e0:	fd 80       	ldd	r15, Y+5	; 0x05
    34e2:	0c 81       	ldd	r16, Y+4	; 0x04
    34e4:	1b 81       	ldd	r17, Y+3	; 0x03
    34e6:	aa 81       	ldd	r26, Y+2	; 0x02
    34e8:	b9 81       	ldd	r27, Y+1	; 0x01
    34ea:	ce 0f       	add	r28, r30
    34ec:	d1 1d       	adc	r29, r1
    34ee:	0f b6       	in	r0, 0x3f	; 63
    34f0:	f8 94       	cli
    34f2:	de bf       	out	0x3e, r29	; 62
    34f4:	0f be       	out	0x3f, r0	; 63
    34f6:	cd bf       	out	0x3d, r28	; 61
    34f8:	ed 01       	movw	r28, r26
    34fa:	08 95       	ret

000034fc <itoa>:
    34fc:	fb 01       	movw	r30, r22
    34fe:	9f 01       	movw	r18, r30
    3500:	e8 94       	clt
    3502:	42 30       	cpi	r20, 0x02	; 2
    3504:	c4 f0       	brlt	.+48     	; 0x3536 <itoa+0x3a>
    3506:	45 32       	cpi	r20, 0x25	; 37
    3508:	b4 f4       	brge	.+44     	; 0x3536 <itoa+0x3a>
    350a:	4a 30       	cpi	r20, 0x0A	; 10
    350c:	29 f4       	brne	.+10     	; 0x3518 <itoa+0x1c>
    350e:	97 fb       	bst	r25, 7
    3510:	1e f4       	brtc	.+6      	; 0x3518 <itoa+0x1c>
    3512:	90 95       	com	r25
    3514:	81 95       	neg	r24
    3516:	9f 4f       	sbci	r25, 0xFF	; 255
    3518:	64 2f       	mov	r22, r20
    351a:	77 27       	eor	r23, r23
    351c:	0e 94 af 1a 	call	0x355e	; 0x355e <__udivmodhi4>
    3520:	80 5d       	subi	r24, 0xD0	; 208
    3522:	8a 33       	cpi	r24, 0x3A	; 58
    3524:	0c f0       	brlt	.+2      	; 0x3528 <itoa+0x2c>
    3526:	89 5d       	subi	r24, 0xD9	; 217
    3528:	81 93       	st	Z+, r24
    352a:	cb 01       	movw	r24, r22
    352c:	00 97       	sbiw	r24, 0x00	; 0
    352e:	a1 f7       	brne	.-24     	; 0x3518 <itoa+0x1c>
    3530:	16 f4       	brtc	.+4      	; 0x3536 <itoa+0x3a>
    3532:	5d e2       	ldi	r21, 0x2D	; 45
    3534:	51 93       	st	Z+, r21
    3536:	10 82       	st	Z, r1
    3538:	c9 01       	movw	r24, r18
    353a:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <strrev>

0000353e <strrev>:
    353e:	dc 01       	movw	r26, r24
    3540:	fc 01       	movw	r30, r24
    3542:	67 2f       	mov	r22, r23
    3544:	71 91       	ld	r23, Z+
    3546:	77 23       	and	r23, r23
    3548:	e1 f7       	brne	.-8      	; 0x3542 <strrev+0x4>
    354a:	32 97       	sbiw	r30, 0x02	; 2
    354c:	04 c0       	rjmp	.+8      	; 0x3556 <strrev+0x18>
    354e:	7c 91       	ld	r23, X
    3550:	6d 93       	st	X+, r22
    3552:	70 83       	st	Z, r23
    3554:	62 91       	ld	r22, -Z
    3556:	ae 17       	cp	r26, r30
    3558:	bf 07       	cpc	r27, r31
    355a:	c8 f3       	brcs	.-14     	; 0x354e <strrev+0x10>
    355c:	08 95       	ret

0000355e <__udivmodhi4>:
    355e:	aa 1b       	sub	r26, r26
    3560:	bb 1b       	sub	r27, r27
    3562:	51 e1       	ldi	r21, 0x11	; 17
    3564:	07 c0       	rjmp	.+14     	; 0x3574 <__udivmodhi4_ep>

00003566 <__udivmodhi4_loop>:
    3566:	aa 1f       	adc	r26, r26
    3568:	bb 1f       	adc	r27, r27
    356a:	a6 17       	cp	r26, r22
    356c:	b7 07       	cpc	r27, r23
    356e:	10 f0       	brcs	.+4      	; 0x3574 <__udivmodhi4_ep>
    3570:	a6 1b       	sub	r26, r22
    3572:	b7 0b       	sbc	r27, r23

00003574 <__udivmodhi4_ep>:
    3574:	88 1f       	adc	r24, r24
    3576:	99 1f       	adc	r25, r25
    3578:	5a 95       	dec	r21
    357a:	a9 f7       	brne	.-22     	; 0x3566 <__udivmodhi4_loop>
    357c:	80 95       	com	r24
    357e:	90 95       	com	r25
    3580:	bc 01       	movw	r22, r24
    3582:	cd 01       	movw	r24, r26
    3584:	08 95       	ret

00003586 <_exit>:
    3586:	f8 94       	cli

00003588 <__stop_program>:
    3588:	ff cf       	rjmp	.-2      	; 0x3588 <__stop_program>
